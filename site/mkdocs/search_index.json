{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Soulweb Documentations\n\n\nHere you can find the Soulweb Team documentation.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-soulweb-documentations", 
            "text": "Here you can find the Soulweb Team documentation.", 
            "title": "Welcome to Soulweb Documentations"
        }, 
        {
            "location": "/drupal/drupal_vm/", 
            "text": "Development Envirorment\n\n\nDrupal VM\n\n\nDrupal VM\n is A VM for local Drupal development, built with Vagrant + Ansible.\n\n\n\n\nQuick Start Guide\n\n\nDrupal VM Documentation\n  \n\n\n\n\nRequirements\n\n\n1. Virtualbox and Vagrant\n\n\nDownload and install \nVagrant\n and \nVirtualBox\n and keep them updated.\n\n\n2. Xcode\n\n\nInstall \nXcode\n.\n\n\n3. Ansible\n\n\nInstall \nAnsible\n via \npip\n.\n\n\nOpen a \nTerminal\n and run:\n\n\nsudo easy_install pip\nsudo pip install ansible --quiet\n\n\n\n\n\nTo update \nAnsible\n:\n\n\nsudo pip install ansible --upgrade\n\n\n\n\n\n4. Vagrant Plugins\n\n\nInstall the needed Vagrant plugins.\n\n\nFrom the \nTerminal\n run:\n\n\nvagrant plugin install vagrant-vbguest\nvagrant plugin install vagrant-hostsupdater\nvagrant plugin install vagrant-auto_network\nvagrant plugin install vagrant-cachier\n\n\n\n\n\nBuild Drupal VM from scratch\n\n\n1. Download\n\n\nClone the \nDrupal VM\n project. From the \nTerminal\n run:\n\n\ngit clone https://github.com/geerlingguy/drupal-vm.git yourprojectnamevm\n\n\n\n\n\nEnter on the created folder \nyourprojectnamevm\n.\n\n\n2. config.yml\n\n\nThe main configuration file of the project. Commonly this is a copy of \ndefault.config.yml\n with the values tweaked to your own project.\n\n\nCopy \ndefault.config.yml\n as \nconfig.yml\n.\n\n\nOpen the \nconfig.yml\n with your favorite editor and edit the following lines:\n\n\nvagrant_hostname\n:\n \nyourprojectnamevm\n.\ndev\n\n\nvagrant_machine_name\n:\n \nyourprojectnamevm\n\n\nvagrant_ip\n:\n \n0.0\n.\n0.0\n\n\n\n\n\n\nSet the \nlocal\n and \nremote\n (\nvagrant\n) folders to sync:\n\n\nvagrant_synced_folders:\n  # The first synced folder will be used for the default Drupal installation, if\n  # any of the build_* settings are \ntrue\n. By default the folder is set to\n  # the drupal-vm folder.\n  - local_path: ~/Sites/yourprojectnamevm\n    destination: /var/www\n    type: nfs\n    create: true\n\n\n\n\n\nConfigure the \ndrupal composer install dir\n to the directory destination of above:\n\n\ndrupal_composer_install_dir: \n/var/www/yourprojectnamevm/drupal\u201d\n\n\n\n\n\nBy default, the \nDrupal VM\n includes extras packages listed under \ninstalled_extras\n. If you don't want or need one or more of those extras, just comment out/in them from the list. Our default list is:\n\n\ninstalled_extras:\n  - adminer\n  # - blackfire\n  - drupalconsole\n  - drush\n  # - elasticsearch\n  # - java\n  - mailhog\n  # - memcached\n  # - newrelic\n  # - nodejs\n  - pimpmylog\n  # - redis\n  # - ruby\n  # - selenium\n  # - solr\n  # - tideways\n  # - upload-progress\n  # - varnish\n  - xdebug\n  # - xhprof\n\n\n\n\n\nSelect the desidered php version. Currently-supported versions: \n5.6\n, \n7.0\n, \n7.1\n. Our default for  \nDrupal 8\n projects is \n7.1\n:\n\n\nphp_version: \u201c7.1\n\n\n\n\n\n\nSet \nphp memory limit\n at least to \n256M\n:\n\n\nphp_memory_limit: \n256M\n\nphp_opcache_memory_consumption: \n256\n\n\n\n\n\n\nContinue to modify config.yml to your liking.\n\n\n3. Build up\n\n\nOpen Terminal, \ncd\n to the vagrant directory (containing the Vagrantfile and the config.yml file).\n\n\nType in \nvagrant up\n, and let \nVagrant\n do its magic.\n\n\nWhen it\u2019s done, open the browser and type your \nvagrant_hostname\n (e.g. \ndrupaltest.dev\n), in the address bar, to navigate on your drupal installation.\n\n\nDefault Drupal credentials to login are specified in your \nconfig.yml\n\n\ndrupal_account_name\n:\n \nadmin\n\n\ndrupal_account_pass\n:\n \nadmin\n\n\n\n\n\n\nAt the address \ndashboard.your_vagrant_hostname.dev\n (e.g. \ndashboard.drupaltest.dev\n) you can see your \nDrupalVM\n dashboard.\n\n\nBuild Drupal VM from existing Drupal project\n\n\nThis is in the scenario where you have an existing existing drupal project (\ncomposer\n based) on \ngit\n and you want to start a new \nDrupal VM\n to local development.\n\n\n1. Download\n\n\nClone the \nDrupal VM\n project. From the \nTerminal\n run:\n\n\ngit clone https://github.com/geerlingguy/drupal-vm.git yourprojectnamevm\n\n\n\n\n\nEnter on the created folder \nyourprojectnamevm\n.\n\n\n2. config.yml\n\n\nThe main configuration file of the project. Commonly this is a copy of \ndefault.config.yml\n with the values tweaked to your own project.\n\n\nCopy \ndefault.config.yml\n as \nconfig.yml\n.\n\n\nOpen the \nconfig.yml\n with your favorite editor and edit the following lines:\n\n\nvagrant_hostname\n:\n \nyourprojectnamevm\n.\ndev\n\n\nvagrant_machine_name\n:\n \nyourprojectnamevm\n\n\nvagrant_ip\n:\n \n0.0\n.\n0.0\n\n\n\n\n\n\nSet the \nlocal\n and \nremote\n (\nvagrant\n) folders to sync:\n\n\nvagrant_synced_folders:\n  # The first synced folder will be used for the default Drupal installation, if\n  # any of the build_* settings are \ntrue\n. By default the folder is set to\n  # the drupal-vm folder.\n  - local_path: ~/Sites/yourprojectnamevm\n    destination: /var/www\n    type: nfs\n    create: true\n\n\n\n\n\nConfigure the \ndrupal composer install dir\n to the directory destination of above:\n\n\ndrupal_composer_install_dir: \n/var/www/yourprojectnamevm/drupal\u201d\n\n\n\n\n\nSet \nDrupal VM\n to use your \ncomposer.json\n in order to automatically install your \ncomposer\n dependencies:\n\n\ndrupal_build_makefile\n:\n \nfalse\n\n\ndrupal_composer_path\n:\n \nfalse\n\n\n...\n\n\ndrupal_build_composer\n:\n \nfalse\n\n\n...\n\n\ndrupal_build_composer_project\n:\n \nfalse\n\n\n\n\n\n\nWe need to disable the automatic drupal install site because, for now, in this scenario it doesn't work:\n\n\ndrupal_install_site\n:\n \nfalse\n\n\n\n\n\n\nWe'll manually install it later (see \nManually install Drupal site\n)\n\n\nBy default, the \nDrupal VM\n includes extras packages listed under \ninstalled_extras\n. If you don't want or need one or more of those extras, just comment out/in them from the list. Our default list is:\n\n\ninstalled_extras:\n  - adminer\n  # - blackfire\n  - drupalconsole\n  - drush\n  # - elasticsearch\n  # - java\n  - mailhog\n  # - memcached\n  # - newrelic\n  # - nodejs\n  - pimpmylog\n  # - redis\n  # - ruby\n  # - selenium\n  # - solr\n  # - tideways\n  # - upload-progress\n  # - varnish\n  - xdebug\n  # - xhprof\n\n\n\n\n\nSelect the desidered php version. Currently-supported versions: \n5.6\n, \n7.0\n, \n7.1\n. Our default for  \nDrupal 8\n projects is \n7.1\n:\n\n\nphp_version: \u201c7.1\n\n\n\n\n\n\nSet \nphp memory limit\n at least to \n256M\n:\n\n\nphp_memory_limit: \n256M\n\nphp_opcache_memory_consumption: \n256\n\n\n\n\n\n\nContinue to modify config.yml to your liking.\n\n\n3. Download your Drupal project site\n\n\nClone your \nDrupal\n project site in the folder set as \nlocal_path\n before on your \nconfig.yml\n (e.g. \n~/Sites/yourprojectnamevm\n):\n\n\ngit clone https://github.com/yourrepository/projectname.git yourprojectnamevm\n\n\n\n\n\nWe'll use the \nConfiguration Installer\n profile to install your drupal site with your configuration.\n\n\nBe sure to have it in you \ncomposer\n dependencies. If not, add it to your \nconfig.yml\n:\n\n\ndrupal_composer_dependencies:\n  ...\n  - \ndrupal/config_installer\n\n\n\n\n\n\n4. Build up\n\n\nOpen Terminal, \ncd\n to the vagrant directory (containing the Vagrantfile and the config.yml file).\n\n\nType in \nvagrant up\n, and let \nVagrant\n do its magic.\n\n\n5. Manually install Drupal site\n\n\nWhen the \nVM\n is up and running, enter on it (\nvagrant ssh\n) and go to your drupal site folder:\n\n\ncd /var/www/yourprojectnamevm/drupal/web\n\n\n\n\n\nRun the \ndrupal\n installation (replace the \ndb\n parameters):\n\n\ndrush\n \nsite\n-\ninstall\n \nconfig_installer\n \nconfig_installer_sync_configure_form\n.\nsync_directory\n=\n..\n/\nconfig\n/\nsync\n \n--\ndb\n-\nurl\n=\nmysql\n:\n//dbuser:dbpass@127.0.0.1:dbport/dbname --account-name=admin --account-pass=admin -y\n\n\n\n\n\n\nwhere \nconfig_installer_sync_configure_form.sync_directory\n is set to the folder that contains your \ndrupal\n default configuration. Our projects \ndefault\n is \n../config/sync\n.\n\n\nWhen it\u2019s done, open the browser and type your \nvagrant_hostname\n (e.g. \ndrupaltest.dev\n), in the address bar, to navigate on your drupal installation.\n\n\n\n\nConfiguration Split\n\n\nin case your \ndrupal\n project config is split in different folder than the \ndefault\n, with \nConfiguration Split\n, and you need to import them too, for each of the split config you need to import run:\n\n\ndrush csim split_machine_name\n\n\n\n\n\nReplace \nsplit_machine_name\n with your configuration split \nmachine name\n\n\n\n\nDefault Drupal credentials to login are specified in your \nconfig.yml\n\n\ndrupal_account_name\n:\n \nadmin\n\n\ndrupal_account_pass\n:\n \nadmin\n\n\n\n\n\n\nAt the address \ndashboard.your_vagrant_hostname.dev\n (e.g. \ndashboard.drupaltest.dev\n) you can see your \nDrupalVM\n dashboard.\n\n\nUpdating Drupal VM\n\n\nDrupal VM follows semantic versioning, which means your configuration should continue working (potentially with very minor modifications) throughout a major release cycle. Here is the process to follow when updating Drupal VM between minor releases:\n\n\n\n\nRead through the \nrelease notes\n and add/modify \nconfig.yml\n variables mentioned therein.\n\n\nDo a diff of your \nconfig.yml\n with the updated \ndefault.config.yml\n (e.g. \ncurl https://raw.githubusercontent.com/geerlingguy/drupal-vm/master/default.config.yml | git diff --no-index config.yml -\n).\n\n\nRun \nvagrant provision\n to provision the VM, incorporating all the latest changes.\n\n\n\n\nFor major version upgrades (e.g. 3.x.x to 4.x.x), it may be simpler to destroy the VM (\nvagrant destroy\n) then build a fresh new VM (\nvagrant up\n) using the new version of Drupal VM.", 
            "title": "Drupal VM"
        }, 
        {
            "location": "/drupal/drupal_vm/#development-envirorment", 
            "text": "", 
            "title": "Development Envirorment"
        }, 
        {
            "location": "/drupal/drupal_vm/#drupal-vm", 
            "text": "Drupal VM  is A VM for local Drupal development, built with Vagrant + Ansible.   Quick Start Guide  Drupal VM Documentation", 
            "title": "Drupal VM"
        }, 
        {
            "location": "/drupal/drupal_vm/#requirements", 
            "text": "", 
            "title": "Requirements"
        }, 
        {
            "location": "/drupal/drupal_vm/#1-virtualbox-and-vagrant", 
            "text": "Download and install  Vagrant  and  VirtualBox  and keep them updated.", 
            "title": "1. Virtualbox and Vagrant"
        }, 
        {
            "location": "/drupal/drupal_vm/#2-xcode", 
            "text": "Install  Xcode .", 
            "title": "2. Xcode"
        }, 
        {
            "location": "/drupal/drupal_vm/#3-ansible", 
            "text": "Install  Ansible  via  pip .  Open a  Terminal  and run:  sudo easy_install pip\nsudo pip install ansible --quiet  To update  Ansible :  sudo pip install ansible --upgrade", 
            "title": "3. Ansible"
        }, 
        {
            "location": "/drupal/drupal_vm/#4-vagrant-plugins", 
            "text": "Install the needed Vagrant plugins.  From the  Terminal  run:  vagrant plugin install vagrant-vbguest\nvagrant plugin install vagrant-hostsupdater\nvagrant plugin install vagrant-auto_network\nvagrant plugin install vagrant-cachier", 
            "title": "4. Vagrant Plugins"
        }, 
        {
            "location": "/drupal/drupal_vm/#build-drupal-vm-from-scratch", 
            "text": "", 
            "title": "Build Drupal VM from scratch"
        }, 
        {
            "location": "/drupal/drupal_vm/#1-download", 
            "text": "Clone the  Drupal VM  project. From the  Terminal  run:  git clone https://github.com/geerlingguy/drupal-vm.git yourprojectnamevm  Enter on the created folder  yourprojectnamevm .", 
            "title": "1. Download"
        }, 
        {
            "location": "/drupal/drupal_vm/#2-configyml", 
            "text": "The main configuration file of the project. Commonly this is a copy of  default.config.yml  with the values tweaked to your own project.  Copy  default.config.yml  as  config.yml .  Open the  config.yml  with your favorite editor and edit the following lines:  vagrant_hostname :   yourprojectnamevm . dev  vagrant_machine_name :   yourprojectnamevm  vagrant_ip :   0.0 . 0.0   Set the  local  and  remote  ( vagrant ) folders to sync:  vagrant_synced_folders:\n  # The first synced folder will be used for the default Drupal installation, if\n  # any of the build_* settings are  true . By default the folder is set to\n  # the drupal-vm folder.\n  - local_path: ~/Sites/yourprojectnamevm\n    destination: /var/www\n    type: nfs\n    create: true  Configure the  drupal composer install dir  to the directory destination of above:  drupal_composer_install_dir:  /var/www/yourprojectnamevm/drupal\u201d  By default, the  Drupal VM  includes extras packages listed under  installed_extras . If you don't want or need one or more of those extras, just comment out/in them from the list. Our default list is:  installed_extras:\n  - adminer\n  # - blackfire\n  - drupalconsole\n  - drush\n  # - elasticsearch\n  # - java\n  - mailhog\n  # - memcached\n  # - newrelic\n  # - nodejs\n  - pimpmylog\n  # - redis\n  # - ruby\n  # - selenium\n  # - solr\n  # - tideways\n  # - upload-progress\n  # - varnish\n  - xdebug\n  # - xhprof  Select the desidered php version. Currently-supported versions:  5.6 ,  7.0 ,  7.1 . Our default for   Drupal 8  projects is  7.1 :  php_version: \u201c7.1   Set  php memory limit  at least to  256M :  php_memory_limit:  256M \nphp_opcache_memory_consumption:  256   Continue to modify config.yml to your liking.", 
            "title": "2. config.yml"
        }, 
        {
            "location": "/drupal/drupal_vm/#3-build-up", 
            "text": "Open Terminal,  cd  to the vagrant directory (containing the Vagrantfile and the config.yml file).  Type in  vagrant up , and let  Vagrant  do its magic.  When it\u2019s done, open the browser and type your  vagrant_hostname  (e.g.  drupaltest.dev ), in the address bar, to navigate on your drupal installation.  Default Drupal credentials to login are specified in your  config.yml  drupal_account_name :   admin  drupal_account_pass :   admin   At the address  dashboard.your_vagrant_hostname.dev  (e.g.  dashboard.drupaltest.dev ) you can see your  DrupalVM  dashboard.", 
            "title": "3. Build up"
        }, 
        {
            "location": "/drupal/drupal_vm/#build-drupal-vm-from-existing-drupal-project", 
            "text": "This is in the scenario where you have an existing existing drupal project ( composer  based) on  git  and you want to start a new  Drupal VM  to local development.", 
            "title": "Build Drupal VM from existing Drupal project"
        }, 
        {
            "location": "/drupal/drupal_vm/#1-download_1", 
            "text": "Clone the  Drupal VM  project. From the  Terminal  run:  git clone https://github.com/geerlingguy/drupal-vm.git yourprojectnamevm  Enter on the created folder  yourprojectnamevm .", 
            "title": "1. Download"
        }, 
        {
            "location": "/drupal/drupal_vm/#2-configyml_1", 
            "text": "The main configuration file of the project. Commonly this is a copy of  default.config.yml  with the values tweaked to your own project.  Copy  default.config.yml  as  config.yml .  Open the  config.yml  with your favorite editor and edit the following lines:  vagrant_hostname :   yourprojectnamevm . dev  vagrant_machine_name :   yourprojectnamevm  vagrant_ip :   0.0 . 0.0   Set the  local  and  remote  ( vagrant ) folders to sync:  vagrant_synced_folders:\n  # The first synced folder will be used for the default Drupal installation, if\n  # any of the build_* settings are  true . By default the folder is set to\n  # the drupal-vm folder.\n  - local_path: ~/Sites/yourprojectnamevm\n    destination: /var/www\n    type: nfs\n    create: true  Configure the  drupal composer install dir  to the directory destination of above:  drupal_composer_install_dir:  /var/www/yourprojectnamevm/drupal\u201d  Set  Drupal VM  to use your  composer.json  in order to automatically install your  composer  dependencies:  drupal_build_makefile :   false  drupal_composer_path :   false  ...  drupal_build_composer :   false  ...  drupal_build_composer_project :   false   We need to disable the automatic drupal install site because, for now, in this scenario it doesn't work:  drupal_install_site :   false   We'll manually install it later (see  Manually install Drupal site )  By default, the  Drupal VM  includes extras packages listed under  installed_extras . If you don't want or need one or more of those extras, just comment out/in them from the list. Our default list is:  installed_extras:\n  - adminer\n  # - blackfire\n  - drupalconsole\n  - drush\n  # - elasticsearch\n  # - java\n  - mailhog\n  # - memcached\n  # - newrelic\n  # - nodejs\n  - pimpmylog\n  # - redis\n  # - ruby\n  # - selenium\n  # - solr\n  # - tideways\n  # - upload-progress\n  # - varnish\n  - xdebug\n  # - xhprof  Select the desidered php version. Currently-supported versions:  5.6 ,  7.0 ,  7.1 . Our default for   Drupal 8  projects is  7.1 :  php_version: \u201c7.1   Set  php memory limit  at least to  256M :  php_memory_limit:  256M \nphp_opcache_memory_consumption:  256   Continue to modify config.yml to your liking.", 
            "title": "2. config.yml"
        }, 
        {
            "location": "/drupal/drupal_vm/#3-download-your-drupal-project-site", 
            "text": "Clone your  Drupal  project site in the folder set as  local_path  before on your  config.yml  (e.g.  ~/Sites/yourprojectnamevm ):  git clone https://github.com/yourrepository/projectname.git yourprojectnamevm  We'll use the  Configuration Installer  profile to install your drupal site with your configuration.  Be sure to have it in you  composer  dependencies. If not, add it to your  config.yml :  drupal_composer_dependencies:\n  ...\n  -  drupal/config_installer", 
            "title": "3. Download your Drupal project site"
        }, 
        {
            "location": "/drupal/drupal_vm/#4-build-up", 
            "text": "Open Terminal,  cd  to the vagrant directory (containing the Vagrantfile and the config.yml file).  Type in  vagrant up , and let  Vagrant  do its magic.", 
            "title": "4. Build up"
        }, 
        {
            "location": "/drupal/drupal_vm/#5-manually-install-drupal-site", 
            "text": "When the  VM  is up and running, enter on it ( vagrant ssh ) and go to your drupal site folder:  cd /var/www/yourprojectnamevm/drupal/web  Run the  drupal  installation (replace the  db  parameters):  drush   site - install   config_installer   config_installer_sync_configure_form . sync_directory = .. / config / sync   -- db - url = mysql : //dbuser:dbpass@127.0.0.1:dbport/dbname --account-name=admin --account-pass=admin -y   where  config_installer_sync_configure_form.sync_directory  is set to the folder that contains your  drupal  default configuration. Our projects  default  is  ../config/sync .  When it\u2019s done, open the browser and type your  vagrant_hostname  (e.g.  drupaltest.dev ), in the address bar, to navigate on your drupal installation.   Configuration Split  in case your  drupal  project config is split in different folder than the  default , with  Configuration Split , and you need to import them too, for each of the split config you need to import run:  drush csim split_machine_name  Replace  split_machine_name  with your configuration split  machine name   Default Drupal credentials to login are specified in your  config.yml  drupal_account_name :   admin  drupal_account_pass :   admin   At the address  dashboard.your_vagrant_hostname.dev  (e.g.  dashboard.drupaltest.dev ) you can see your  DrupalVM  dashboard.", 
            "title": "5. Manually install Drupal site"
        }, 
        {
            "location": "/drupal/drupal_vm/#updating-drupal-vm", 
            "text": "Drupal VM follows semantic versioning, which means your configuration should continue working (potentially with very minor modifications) throughout a major release cycle. Here is the process to follow when updating Drupal VM between minor releases:   Read through the  release notes  and add/modify  config.yml  variables mentioned therein.  Do a diff of your  config.yml  with the updated  default.config.yml  (e.g.  curl https://raw.githubusercontent.com/geerlingguy/drupal-vm/master/default.config.yml | git diff --no-index config.yml - ).  Run  vagrant provision  to provision the VM, incorporating all the latest changes.   For major version upgrades (e.g. 3.x.x to 4.x.x), it may be simpler to destroy the VM ( vagrant destroy ) then build a fresh new VM ( vagrant up ) using the new version of Drupal VM.", 
            "title": "Updating Drupal VM"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/", 
            "text": "PhpStorm Project\n\n\nMake sure to have the latest \nPhpStorm\n available for a better support.\n\n\nCreate new project Vagrant based\n\n\n1. Create new project\n\n\nOpen \nPhpStorm\n and select \nCreate New Project from Existing File\n\n\n\n\nSelect \nSources file are in a local directory, no Web server is yet configured.\n\n\n\n\nSelect your \nDrupal\n installation directory on the local machine, make it the \nProject Root\n and click on \nFinish\n button\n\n\n\n\nOnce the project is created, \nPhpStorm\n will index your project files and must recognise it as a \nDrupal\n project. It should ask to enable the \nDrupal\n support. If not, enable it by yourself:\n\n\n\n\n2. Integrate Vagrant\n\n\nTo make \nPhpStorm\n find the vagrant executable run:\n\n\nsudo ln -s /usr/local/bin/vagrant /usr/bin/vagrant\n\n\n\n\n\n\n\nNote\n\n\nin case the executable is in a different path then \n/usr/local/bin\n change it, you can find the vagrant path with \nwhereis vagrant\n\n\n\n\nTo integrate \nVagrant\n set the \nIstance Folder\n on the \nVagrant\n settings:\n\n\n\n\nThen select the \nCurrent Vagrant\n on \nSSH Terminal\n settings:\n\n\n\n\nCreate the new Vagrant \nDeployment\n server clicking on \n+\n button in the following settings:\n\n\n\n\nEnter a \nName\n and select Type \nSFTP\n:\n\n\n\n\nClick \nOK\n button and configure the rest as:\n\n\nSFTP host: your vagrant_hostname\nRoot path: your Drupal installation path on the vagrant machine\nUsername: vagrant \nPassword: vagrant\n\n\n\n\n\nGo on the \nMappings\n tab and set only the \nDeployment path on server\n with your \nDrupal\n installation path on the \nvagrant machine\n\n\n\n\nSet your vagrant \nPHP interpreter\n. From the following click on \n\u2026\n of \nCLI Interpreter\n:\n\n\n\n\nClick on \n+\n button and select \nRemote\n. Set the interpreter as below, selecting \nVagrant\n and setting the \nVagrant Istance Folder\n to your \nVagrant\n folder:\n\n\n\n\nGo to \nSettings\n -\n \nPHP\n -\n \nServers\n and click on \n+\n button:\n\n\n\n\nSet your \nName\n and \nHost\n. Check \nUse path mappings\n and enter the \nAbsolute path on the server\n to your \ndrupal\n installation on vagrant machine.\n\n\nAdd GitHub repository and Initial Commit\n\n\nEdit \n.gitignore\n file on your \ndrupal\n installation adding:\n\n\n/web/sites/*/services.yml\n\n\n\n\n\nShare the project on \nGitHub\n:\n\n\n\n\nWrite the \nNew repository name\n, select \nprivate\n, if needed, and click on \nShare\n\n\n\n\nAdd files for \ninitial commit\n and \npush\n on git by clicking on \nOK\n button\n\n\n\n\nImport to existing GitHub repository and Initial Commit\n\n\nEnable version control integration from PHPSTORM:\n\n\n\n\nSet the \nRemote\n origin of the existing \ngit\n repository adding the repository \nurl\n (e.g. \nhttps://github.com/mecmartini/soulweb-docs.git\n)\n\n\n\n\n\n\n\n\n\n\nPush the \ninitial commit\n (see \nAdd GitHub repository and Initial Commit\n).", 
            "title": "PhpStorm"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#phpstorm-project", 
            "text": "Make sure to have the latest  PhpStorm  available for a better support.", 
            "title": "PhpStorm Project"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#create-new-project-vagrant-based", 
            "text": "", 
            "title": "Create new project Vagrant based"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#1-create-new-project", 
            "text": "Open  PhpStorm  and select  Create New Project from Existing File   Select  Sources file are in a local directory, no Web server is yet configured.   Select your  Drupal  installation directory on the local machine, make it the  Project Root  and click on  Finish  button   Once the project is created,  PhpStorm  will index your project files and must recognise it as a  Drupal  project. It should ask to enable the  Drupal  support. If not, enable it by yourself:", 
            "title": "1. Create new project"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#2-integrate-vagrant", 
            "text": "To make  PhpStorm  find the vagrant executable run:  sudo ln -s /usr/local/bin/vagrant /usr/bin/vagrant   Note  in case the executable is in a different path then  /usr/local/bin  change it, you can find the vagrant path with  whereis vagrant   To integrate  Vagrant  set the  Istance Folder  on the  Vagrant  settings:   Then select the  Current Vagrant  on  SSH Terminal  settings:   Create the new Vagrant  Deployment  server clicking on  +  button in the following settings:   Enter a  Name  and select Type  SFTP :   Click  OK  button and configure the rest as:  SFTP host: your vagrant_hostname\nRoot path: your Drupal installation path on the vagrant machine\nUsername: vagrant \nPassword: vagrant  Go on the  Mappings  tab and set only the  Deployment path on server  with your  Drupal  installation path on the  vagrant machine   Set your vagrant  PHP interpreter . From the following click on  \u2026  of  CLI Interpreter :   Click on  +  button and select  Remote . Set the interpreter as below, selecting  Vagrant  and setting the  Vagrant Istance Folder  to your  Vagrant  folder:   Go to  Settings  -   PHP  -   Servers  and click on  +  button:   Set your  Name  and  Host . Check  Use path mappings  and enter the  Absolute path on the server  to your  drupal  installation on vagrant machine.", 
            "title": "2. Integrate Vagrant"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#add-github-repository-and-initial-commit", 
            "text": "Edit  .gitignore  file on your  drupal  installation adding:  /web/sites/*/services.yml  Share the project on  GitHub :   Write the  New repository name , select  private , if needed, and click on  Share   Add files for  initial commit  and  push  on git by clicking on  OK  button", 
            "title": "Add GitHub repository and Initial Commit"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#import-to-existing-github-repository-and-initial-commit", 
            "text": "Enable version control integration from PHPSTORM:   Set the  Remote  origin of the existing  git  repository adding the repository  url  (e.g.  https://github.com/mecmartini/soulweb-docs.git )      Push the  initial commit  (see  Add GitHub repository and Initial Commit ).", 
            "title": "Import to existing GitHub repository and Initial Commit"
        }, 
        {
            "location": "/drupal/drupal_vm_xdebug/", 
            "text": "Xdebug\n\n\n1. Enable Xdebug on your Vagrant machine\n\n\nOpen the vagrant machine \nconfig.yml\n file and be sure to have the xdebug line uncommented on \ninstalled_extras\n\n\ninstalled_extras:\n      - adminer\n      # - blackfire\n      - drupalconsole\n      - drush\n      # - elasticsearch\n      # - java\n      - mailhog\n      # - memcached\n      # - newrelic\n      # - nodejs\n      - pimpmylog\n      # - redis\n      # - ruby\n      # - selenium\n      # - solr\n      # - tideways\n      # - upload-progress\n      # - varnish\n      - xdebug\n      # - xhprof\n\n\n\n\n\nBe sure to have the following lines set as:\n\n\n# XDebug configuration. XDebug is disabled by default for better performance.\nphp_xdebug_default_enable: 1\nphp_xdebug_coverage_enable: 1\n\n\n\n\n\nAdd the port \n9000\n to \nfirewall_allowed_tcp_ports\n\n\nfirewall_allowed_tcp_ports:\n  - \n22\n\n  - \n25\n\n  - \n80\n\n  - \n81\n\n  - \n443\n\n  - \n4444\n\n  - \n8000\n\n  - \n8025\n\n  - \n8080\n\n  - \n8443\n\n  - \n8983\n\n  - \n9000\n\n  - \n9200\n\n\n\n\n\n\nFrom your \nterminal\n go on the \nvagrant\n directory and run \nvagrant up --provision\n, to apply the changes on your \nvagrant\n machine, or run \nvagrant provision\n if your machine is already up.\n\n\n2. Integrate Xdebug in PhpStorm\n\n\nOn \nPhpStorm\n go to \nsettings\n.\n\n\nBe sure to have \nXdebug\n -\n \nDebug port\n set to \n9000\n:\n\n\n\n\nFrom \nPhpStorm\n click on \nEdit Configurations\u2026\n:\n\n\n\n\nClick on \n+\n button and select \nPHP Remote Debug\n:\n\n\n\n\nSelect you Server (see \nAdd GitHub repository and Initial Commit\n) and set \nIde key\n to \nPHPSTORM\n.\n\n\nInstall \nXdebug helper\n as \nChrome\n extension (also available on Firefox)\n\n\n\n\nNote\n\n\nsimilar extensions are available also for \nFirefox\n (e.g. \ntheeasiestxdebug\n).\n\n\n\n\nA new icon should appear on \nChrome\n. Right click on it and select \nOptions\n.\n\n\n\n\nSelect \nPhpStorm\n on \nIDE key\n and save it\n\n\n\n\nClick on \nXdebug helper\n icon and select \nDebug\n\n\n\n\nNow you should be ready to debug. Set a breakpoint on your Drupal \nindex.php\n clicking on the right of the code row number. A red point must appear.\n\n\n\n\nTo start to \ndebug\n click on the \nbug\n icon\n\n\n\n\nThen navigate on your \nDrupal\n installation from the browser and you will see the debugger in action\n\n\n\n\nTo continue the execution of \nDrupal\n after the \nbreakpoint\n click on \nResume Program\n (\nplay\n button on the left of \nDebugger\n tab).\n\n\nTo stop the debugger click on \nStop\n (\nstop\n button on the left of \nDebugger\n tab).", 
            "title": "Xdebug"
        }, 
        {
            "location": "/drupal/drupal_vm_xdebug/#xdebug", 
            "text": "", 
            "title": "Xdebug"
        }, 
        {
            "location": "/drupal/drupal_vm_xdebug/#1-enable-xdebug-on-your-vagrant-machine", 
            "text": "Open the vagrant machine  config.yml  file and be sure to have the xdebug line uncommented on  installed_extras  installed_extras:\n      - adminer\n      # - blackfire\n      - drupalconsole\n      - drush\n      # - elasticsearch\n      # - java\n      - mailhog\n      # - memcached\n      # - newrelic\n      # - nodejs\n      - pimpmylog\n      # - redis\n      # - ruby\n      # - selenium\n      # - solr\n      # - tideways\n      # - upload-progress\n      # - varnish\n      - xdebug\n      # - xhprof  Be sure to have the following lines set as:  # XDebug configuration. XDebug is disabled by default for better performance.\nphp_xdebug_default_enable: 1\nphp_xdebug_coverage_enable: 1  Add the port  9000  to  firewall_allowed_tcp_ports  firewall_allowed_tcp_ports:\n  -  22 \n  -  25 \n  -  80 \n  -  81 \n  -  443 \n  -  4444 \n  -  8000 \n  -  8025 \n  -  8080 \n  -  8443 \n  -  8983 \n  -  9000 \n  -  9200   From your  terminal  go on the  vagrant  directory and run  vagrant up --provision , to apply the changes on your  vagrant  machine, or run  vagrant provision  if your machine is already up.", 
            "title": "1. Enable Xdebug on your Vagrant machine"
        }, 
        {
            "location": "/drupal/drupal_vm_xdebug/#2-integrate-xdebug-in-phpstorm", 
            "text": "On  PhpStorm  go to  settings .  Be sure to have  Xdebug  -   Debug port  set to  9000 :   From  PhpStorm  click on  Edit Configurations\u2026 :   Click on  +  button and select  PHP Remote Debug :   Select you Server (see  Add GitHub repository and Initial Commit ) and set  Ide key  to  PHPSTORM .  Install  Xdebug helper  as  Chrome  extension (also available on Firefox)   Note  similar extensions are available also for  Firefox  (e.g.  theeasiestxdebug ).   A new icon should appear on  Chrome . Right click on it and select  Options .   Select  PhpStorm  on  IDE key  and save it   Click on  Xdebug helper  icon and select  Debug   Now you should be ready to debug. Set a breakpoint on your Drupal  index.php  clicking on the right of the code row number. A red point must appear.   To start to  debug  click on the  bug  icon   Then navigate on your  Drupal  installation from the browser and you will see the debugger in action   To continue the execution of  Drupal  after the  breakpoint  click on  Resume Program  ( play  button on the left of  Debugger  tab).  To stop the debugger click on  Stop  ( stop  button on the left of  Debugger  tab).", 
            "title": "2. Integrate Xdebug in PhpStorm"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/", 
            "text": "Coder Sniffer\n\n\nCoder Sniffer\n is a library that tokenises PHP, JavaScript and CSS files and detects violations of a defined set of coding standards. It works with Drupal 6, 7, or 8.\n\n\n1. Add Coder Sniffer to your Vagrant machine\n\n\nOpen the vagrant machine \nconfig.yml\n file and add to \ncomposer_global_packages\n the line:\n\n\n- { name: drupal/coder, release: \u2018*\n }\n\n\n\n\n\nFrom your \nterminal\n go on the \nvagrant\n directory and run \nvagrant up --provision\n, to apply the changes on your \nvagrant\n machine, or run \nvagrant provision\n if your machine is already up.\n\n\nEnter on your \nvagrant\n machine (\nvagrant ssh\n) and run:\n\n\nphpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n\n\n\n\n\nYou can verify this has worked with:\n\n\nphpcs -i\n\n\n\n\n\nThe above command should include \nDrupalPractice\n and \nDrupal\n in the installed \ncoding standards\n list.\n\n\n2. Integrate Code Sniffer in PhpStorm\n\n\nFrom below select \n+\n and add \nCode Sniffer by Remote Interpreter\n. Select your vagrant \nPHP interpreter\n (see \nAdd GitHub repository and Initial Commit\n). In \nPHP Code Sniffer (phpcs) path\n enter \n/home/vagrant/.composer/vendor/bin/phpcs\n.\nClick on \nValidate\n to verify that has worked.\n\n\n\n\n\n\nGo under \nSettings\n -\n \nInspections\n to enable and set \nPHP Code Sniffer Validation\n as below:", 
            "title": "Coder Sniffer"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/#coder-sniffer", 
            "text": "Coder Sniffer  is a library that tokenises PHP, JavaScript and CSS files and detects violations of a defined set of coding standards. It works with Drupal 6, 7, or 8.", 
            "title": "Coder Sniffer"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/#1-add-coder-sniffer-to-your-vagrant-machine", 
            "text": "Open the vagrant machine  config.yml  file and add to  composer_global_packages  the line:  - { name: drupal/coder, release: \u2018*  }  From your  terminal  go on the  vagrant  directory and run  vagrant up --provision , to apply the changes on your  vagrant  machine, or run  vagrant provision  if your machine is already up.  Enter on your  vagrant  machine ( vagrant ssh ) and run:  phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer  You can verify this has worked with:  phpcs -i  The above command should include  DrupalPractice  and  Drupal  in the installed  coding standards  list.", 
            "title": "1. Add Coder Sniffer to your Vagrant machine"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/#2-integrate-code-sniffer-in-phpstorm", 
            "text": "From below select  +  and add  Code Sniffer by Remote Interpreter . Select your vagrant  PHP interpreter  (see  Add GitHub repository and Initial Commit ). In  PHP Code Sniffer (phpcs) path  enter  /home/vagrant/.composer/vendor/bin/phpcs .\nClick on  Validate  to verify that has worked.    Go under  Settings  -   Inspections  to enable and set  PHP Code Sniffer Validation  as below:", 
            "title": "2. Integrate Code Sniffer in PhpStorm"
        }, 
        {
            "location": "/drupal/drupal_vm_phpunit/", 
            "text": "PHPUnit\n\n\n1. Integrate PHPUnit in PhpStorm\n\n\nEnable the \nTesting\n module on your \ndrupal\n installation. Access on your \nvagrant\n machine (\nvagrant ssh\n), go under the \ndrupal\n installation directory and run:\n\n\ndrush en -y testing\n\n\n\n\n\nOpen the file \nweb/core/phpunit.xml.dist\n, under your \ndrupal\n installation directory, and fill in \nSIMPLETEST_DB\n, \nSIMPLETEST_BASE_URL\n and \nBROWSERTEST_OUTPUT_DIRECTORY\n.\nGo under \nSettings\n \n \nLanguage \n Frameworks\n \n \nPHP\n \n \nPHPUnit\n. Click on the \n+\n button and select \nBy Remote Interpreter\n\n\n\n\nSet the \nInterpreter\n as below. In \nPath to script\n and \nDefault configuration file\n enter the directory path of your \nvagrant\n machine\n\n\n\n\nTo run all \ndrupal\n tests go under \nEdit configurations\n. Click the \n+\n button and select \nPHPUnit\n\n\n\n\n\n\nSet only the \nName\n\n\n\n\nTo test if it works select your \nPHPUnit\n config and click on \nrun\n (\nplay button\n)", 
            "title": "PHPUnit"
        }, 
        {
            "location": "/drupal/drupal_vm_phpunit/#phpunit", 
            "text": "", 
            "title": "PHPUnit"
        }, 
        {
            "location": "/drupal/drupal_vm_phpunit/#1-integrate-phpunit-in-phpstorm", 
            "text": "Enable the  Testing  module on your  drupal  installation. Access on your  vagrant  machine ( vagrant ssh ), go under the  drupal  installation directory and run:  drush en -y testing  Open the file  web/core/phpunit.xml.dist , under your  drupal  installation directory, and fill in  SIMPLETEST_DB ,  SIMPLETEST_BASE_URL  and  BROWSERTEST_OUTPUT_DIRECTORY .\nGo under  Settings     Language   Frameworks     PHP     PHPUnit . Click on the  +  button and select  By Remote Interpreter   Set the  Interpreter  as below. In  Path to script  and  Default configuration file  enter the directory path of your  vagrant  machine   To run all  drupal  tests go under  Edit configurations . Click the  +  button and select  PHPUnit    Set only the  Name   To test if it works select your  PHPUnit  config and click on  run  ( play button )", 
            "title": "1. Integrate PHPUnit in PhpStorm"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/", 
            "text": "Basic Configuration\n\n\n1. .gitignore\n\n\nDefault \n.gitignore\n to use on our Drupal 8 projects:\n\n\n# Ignore directories generated by Composer\n/drush/contrib/\n/vendor/\n/web/core/\n/web/modules/contrib/\n/web/themes/contrib/\n/web/profiles/contrib/\n/web/libraries/\n\n# Ignore sensitive information\n/web/sites/*/settings.php\n/web/sites/*/settings.local.php\n\n# Ignore Drupal\ns file directory\n/web/sites/*/files/\n\n# Ignore SimpleTest multi-site environment.\n/web/sites/simpletest\n\n# Ignore files generated by PhpStorm\n/.idea/\n\n\n\n\n\nYou can add more if you need. You must not remove the defaults.\n\n\n2. Enable shared settings\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) and is \nsettings.php\n writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\nchmod +w sites/default/settings.php\n\n\n\n\n\nOpen \nsettings.php\n file in \nsites/default\n and add these lines to the end:\n\n\nif (file_exists(__DIR__ . \n/settings.shared.php\n)) {\n  include __DIR__ . \n/settings.shared.php\n;\n}\n\n\n\n\n\nThis will include the shared settings file as part of Drupal's settings file.\n\n\n3. Create and enable local settings\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\n\n\n\n\n\nCopy and rename the \nsites/example.settings.local.php\n to \nsites/default/settings.local.php\n:\n\n\ncp sites/example.settings.local.php sites/default/settings.local.php\n\n\n\n\n\nThis will include the local settings file as part of Drupal's settings file.\n\n\nOpen the \nsettings.local.php\n created and add your local local \nhost\n to on \ntrusted host patterns\n adding these lines to the end:\n\n\n$settings[\ntrusted_host_patterns\n][] = \nyourprojectnamevm.dev\n;\n\n\n\n\n\nIf you have more then one host (e.g. for \nmultisite\n) add all of them.\n\n\n3. Disable Drupal caching\n\n\nOpen \nsettings.local.php\n and uncomment (or add) this line to enable the null cache service:\n\n\n$settings[\ncontainer_yamls\n][] = DRUPAL_ROOT . \n/sites/development.services.yml\n;\n\n\n\n\n\nUncomment these lines in \nsettings.local.php\n to disable the render cache and disable dynamic page cache:\n\n\n$settings[\ncache\n][\nbins\n][\nrender\n] = \ncache.backend.null\n;\n$settings[\ncache\n][\nbins\n][\ndynamic_page_cache\n] = \ncache.backend.null\n;\n\n\n\n\n\nOpen \ndevelopment.services.yml\n in the sites folder and add the following block to disable the \ntwig\n cache:\n\n\nparameters\n:\n\n  \ntwig\n.\nconfig\n:\n\n    \ndebug\n:\n \ntrue\n\n    \nauto_reload\n:\n \ntrue\n\n    \ncache\n:\n \nfalse\n\n\n\n\n\n\nAfterwards you have to rebuild the \nDrupal\n cache otherwise your website will encounter an unexpected error on page reload:\n\n\ndrush cr\n\n\n\n\n\nNow you should be able to develop in \nDrupal\n without manual cache rebuilds on a regular basis.\n\n\nYour final \ndevelopment.services.yml\n should look as follows (mind the indentation):\n\n\n# Local development services.\n#\n# To activate this feature, follow the instructions at the top of the\n# \nexample.settings.local.php\n file, which sits next to this file.\nparameters:\n  http.response.debug_cacheability_headers: true\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false\nservices:\n  cache.backend.null:\n    class: Drupal\\Core\\Cache\\NullBackendFactory\n\n\n\n\n\n4. Private files\n\n\nTo use private files on \ndrupal\n you must edit your \nsettings.php\n.\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) and is \nsettings.php\n writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\nchmod +w sites/default/settings.php\n\n\n\n\n\nOpen the site \nsettings.php\n. Uncomment and set the following line with a local file system path where private files will be stored:\n\n\n$settings[\nfile_private_path\n] = \n/var/www/yourprojectnamevm/drupal/private\n;\n\n\n\n\n\nThis directory must be absolute, outside of the Drupal installation directory and not accessible over the web.\n\n\nCaches need to be cleared when this value is changed to make the \nprivate://\n stream wrapper available to the system.\n\n\ndrush cr\n\n\n\n\n\n5. Configuration directory\n\n\nThe configuration directory on our project is already set in the \nsettings.shared.php\n file on the project directory.\n\n\nOur default is:\n\n\n$config_directories[\nsync\n] = \n../config/sync\n;", 
            "title": "Basic Configuration"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#basic-configuration", 
            "text": "", 
            "title": "Basic Configuration"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#1-gitignore", 
            "text": "Default  .gitignore  to use on our Drupal 8 projects:  # Ignore directories generated by Composer\n/drush/contrib/\n/vendor/\n/web/core/\n/web/modules/contrib/\n/web/themes/contrib/\n/web/profiles/contrib/\n/web/libraries/\n\n# Ignore sensitive information\n/web/sites/*/settings.php\n/web/sites/*/settings.local.php\n\n# Ignore Drupal s file directory\n/web/sites/*/files/\n\n# Ignore SimpleTest multi-site environment.\n/web/sites/simpletest\n\n# Ignore files generated by PhpStorm\n/.idea/  You can add more if you need. You must not remove the defaults.", 
            "title": "1. .gitignore"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#2-enable-shared-settings", 
            "text": "You have to make the site settings directory (e.g.  default ) and is  settings.php  writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default\nchmod +w sites/default/settings.php  Open  settings.php  file in  sites/default  and add these lines to the end:  if (file_exists(__DIR__ .  /settings.shared.php )) {\n  include __DIR__ .  /settings.shared.php ;\n}  This will include the shared settings file as part of Drupal's settings file.", 
            "title": "2. Enable shared settings"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#3-create-and-enable-local-settings", 
            "text": "You have to make the site settings directory (e.g.  default ) writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default  Copy and rename the  sites/example.settings.local.php  to  sites/default/settings.local.php :  cp sites/example.settings.local.php sites/default/settings.local.php  This will include the local settings file as part of Drupal's settings file.  Open the  settings.local.php  created and add your local local  host  to on  trusted host patterns  adding these lines to the end:  $settings[ trusted_host_patterns ][] =  yourprojectnamevm.dev ;  If you have more then one host (e.g. for  multisite ) add all of them.", 
            "title": "3. Create and enable local settings"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#3-disable-drupal-caching", 
            "text": "Open  settings.local.php  and uncomment (or add) this line to enable the null cache service:  $settings[ container_yamls ][] = DRUPAL_ROOT .  /sites/development.services.yml ;  Uncomment these lines in  settings.local.php  to disable the render cache and disable dynamic page cache:  $settings[ cache ][ bins ][ render ] =  cache.backend.null ;\n$settings[ cache ][ bins ][ dynamic_page_cache ] =  cache.backend.null ;  Open  development.services.yml  in the sites folder and add the following block to disable the  twig  cache:  parameters : \n   twig . config : \n     debug :   true \n     auto_reload :   true \n     cache :   false   Afterwards you have to rebuild the  Drupal  cache otherwise your website will encounter an unexpected error on page reload:  drush cr  Now you should be able to develop in  Drupal  without manual cache rebuilds on a regular basis.  Your final  development.services.yml  should look as follows (mind the indentation):  # Local development services.\n#\n# To activate this feature, follow the instructions at the top of the\n#  example.settings.local.php  file, which sits next to this file.\nparameters:\n  http.response.debug_cacheability_headers: true\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false\nservices:\n  cache.backend.null:\n    class: Drupal\\Core\\Cache\\NullBackendFactory", 
            "title": "3. Disable Drupal caching"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#4-private-files", 
            "text": "To use private files on  drupal  you must edit your  settings.php .  You have to make the site settings directory (e.g.  default ) and is  settings.php  writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default\nchmod +w sites/default/settings.php  Open the site  settings.php . Uncomment and set the following line with a local file system path where private files will be stored:  $settings[ file_private_path ] =  /var/www/yourprojectnamevm/drupal/private ;  This directory must be absolute, outside of the Drupal installation directory and not accessible over the web.  Caches need to be cleared when this value is changed to make the  private://  stream wrapper available to the system.  drush cr", 
            "title": "4. Private files"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#5-configuration-directory", 
            "text": "The configuration directory on our project is already set in the  settings.shared.php  file on the project directory.  Our default is:  $config_directories[ sync ] =  ../config/sync ;", 
            "title": "5. Configuration directory"
        }, 
        {
            "location": "/drupal/drupal_composer/", 
            "text": "Using Composer\n\n\nAdd Contrib Modules\n\n\nDefault method to add \nDrupal\n module through is:\n\n\ncomposer require drupal/\nmodulename\n\n\n\n\n\n\nYou can specify a version from the command line with:\n\n\ncomposer require drupal/\nmodulename\n:\nversion\n\n\n\n\n\n\n\n\nTip\n\n\nTo avoid problems on different terminals/shells, surround the version using double quotes. Also, to make sure you will require versions of your dependencies that will guarantee not to break other things, try to use the best combination to constrain versions. Check an example:\n\n\ncomposer require \ndrupal/ctools:^3.0@alpha\n\n\n\n\n\n\n\n\nIf you wish to select the \nmodule\n version:\n\n\ncomposer require drupal/\nmodulename\n --prefer-dist\n\n\n\n\n\nAdd other dependencies\n\n\ncomposer require \nvendor\n/\nmodulename\n\n\n\n\n\n\nDevelopment dependencies\n\n\nThere are often components of your project that you need when doing development work, but you don't need on production. For example, Devel, XHProf, and Stage File Proxy are helpful to have on your local environment, but if you don't need them in production, you should exclude them from your codebase entirely (not only for minor performance reasons and keeping your build artifacts smaller\u2014non-installed modules can still be a security risk if they have vulnerabilities).\n\n\nComposer lets you track 'dev dependencies' (using require-dev instead of require) that are installed by default, but can be excluded when building the final deployable codebase (by passing --no-dev when running composer install or composer update).\n\n\nTo add these components only for dev you should run:\n\n\ncomposer require --dev \nvendor\n/\nmodulename\n\n\n\n\n\n\nIn case you are adding a drupal contrib module, remember to exclude it's drupal configuration from the default sync folder through \nConfiguration Split\n\n\nManaging dependencies for a custom project (module, theme, profile, etc.)\n\n\nManaging dependencies for a custom project\n\n\nYou can use Composer to manage dependencies for your custom modules.\n\n\n1. Add composer.json to your project\n\n\nAdd a \ncomposer.json\n file to your custom project where you can define your custom library dependencies.\n\n\n2. Merging in additional composer.json files\n\n\nTo do this, your Drupal site's composer.json (located in the repo root) must have a way to read your custom project's composer.json file. Since your custom project is not hosted on Packagist or Drupal.org, you must use the wikimedia/composer-merge-plugin` package to accomplish this.\n\n\nRequire the \nwikimedia/composer-merge-pluginin\n your Drupal site's \ncomposer.json\n (located in the repo root).\n\n\ncomposer require wikimedia/composer-merge-plugin\n\n\n\n\n\nReference your additional composer.json files in the extra section of your root composer.json file.\n\n\nextra\n: {\n  \nmerge-plugin\n: {\n    \nrequire\n: [\n      \ndocroot/modules/custom/example/composer.json\n\n    ]\n  }\n}\n\n\n\n\n\nUpdate your Drupal site dependencies:\n\n\ncomposer update\n\n\n\n\n\nUpdate Drupal core\n\n\ncomposer update drupal/core --with-dependencies\n\n\n\n\n\nUpdate all Drupal dependencies\n\n\ncomposer update\n\n\n\n\n\nDefine the directories to which Drupal projects should be downloaded\n\n\nBy default, Composer will download all packages to the \"vendor\" directory. Clearly, this doesn't jibe with Drupal modules, themes, profiles, and libraries. To ensure that packages are downloaded to the correct path, Drupal uses the composer/installers package and ships with configuration for the directories for your Drupal site. The drupal/drupal template does not ship with drupal-libary configuration, but you can just add it to your composer.json:\n\n\nextra\n: \n{\n\n    \ninstaller-paths\n:\n \n{\n\n        \ncore\n:\n \n[\ntype:drupal-core\n],\n\n        \nlibraries/{$name}\n:\n \n[\ntype:drupal-library\n],\n\n        \nmodules/contrib/{$name}\n:\n \n[\ntype:drupal-module\n],\n\n        \nprofiles/contrib/{$name}\n:\n \n[\ntype:drupal-profile\n],\n\n        \nthemes/contrib/{$name}\n:\n \n[\ntype:drupal-theme\n],\n\n        \ndrush/{$name}\n:\n \n[\ntype:drupal-drush\n],\n\n        \nmodules/custom/{$name}\n:\n \n[\ntype:drupal-custom-module\n],\n\n        \nthemes/custom/{$name}\n:\n \n[\ntype:drupal-custom-theme\n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\nDefine the directories for arbitrary packages that do not have a \"drupal-*\" type\n\n\nIf you would like to place an arbitrary Composer package in a custom directory, you may use the Composer Installers Extender.\n\n\nFor instance, if you'd like to place the Dropzone package (which does not have a type of drupal-library) in the same directory as other Drupal libraries, you would first composer require oomphinc/composer-installers-extender, then add the following configuration to your composer.json file:\n\n\nextra\n: \n{\n\n    \ninstaller-paths\n:\n \n{\n\n        \nlibraries/{$name}\n:\n \n[\n\n            \ntype:drupal-library\n,\n\n            \nenyo/dropzone\n\n        \n],\n\n    \n}\n\n\n}\n\n\n\n\n\n\nFinally, you would composer require enyo/dropzone.\n\n\nApply patches to downloaded modules\n\n\nIf you need to apply patches (depending on the project being modified, a pull request is often a better solution), you can do so with the composer-patches plugin.\n\n\nTo add a patch to drupal module foobar insert the patches section in the extra section of composer.json:\n\n\nextra\n: {\n    \npatches\n: {\n        \ndrupal/foobar\n: {\n            \nPatch description\n: \nURL to patch\n\n        }\n    }\n}", 
            "title": "Using Composer"
        }, 
        {
            "location": "/drupal/drupal_composer/#using-composer", 
            "text": "", 
            "title": "Using Composer"
        }, 
        {
            "location": "/drupal/drupal_composer/#add-contrib-modules", 
            "text": "Default method to add  Drupal  module through is:  composer require drupal/ modulename   You can specify a version from the command line with:  composer require drupal/ modulename : version    Tip  To avoid problems on different terminals/shells, surround the version using double quotes. Also, to make sure you will require versions of your dependencies that will guarantee not to break other things, try to use the best combination to constrain versions. Check an example:  composer require  drupal/ctools:^3.0@alpha    If you wish to select the  module  version:  composer require drupal/ modulename  --prefer-dist", 
            "title": "Add Contrib Modules"
        }, 
        {
            "location": "/drupal/drupal_composer/#add-other-dependencies", 
            "text": "composer require  vendor / modulename", 
            "title": "Add other dependencies"
        }, 
        {
            "location": "/drupal/drupal_composer/#development-dependencies", 
            "text": "There are often components of your project that you need when doing development work, but you don't need on production. For example, Devel, XHProf, and Stage File Proxy are helpful to have on your local environment, but if you don't need them in production, you should exclude them from your codebase entirely (not only for minor performance reasons and keeping your build artifacts smaller\u2014non-installed modules can still be a security risk if they have vulnerabilities).  Composer lets you track 'dev dependencies' (using require-dev instead of require) that are installed by default, but can be excluded when building the final deployable codebase (by passing --no-dev when running composer install or composer update).  To add these components only for dev you should run:  composer require --dev  vendor / modulename   In case you are adding a drupal contrib module, remember to exclude it's drupal configuration from the default sync folder through  Configuration Split", 
            "title": "Development dependencies"
        }, 
        {
            "location": "/drupal/drupal_composer/#managing-dependencies-for-a-custom-project-module-theme-profile-etc", 
            "text": "Managing dependencies for a custom project  You can use Composer to manage dependencies for your custom modules.", 
            "title": "Managing dependencies for a custom project (module, theme, profile, etc.)"
        }, 
        {
            "location": "/drupal/drupal_composer/#1-add-composerjson-to-your-project", 
            "text": "Add a  composer.json  file to your custom project where you can define your custom library dependencies.", 
            "title": "1. Add composer.json to your project"
        }, 
        {
            "location": "/drupal/drupal_composer/#2-merging-in-additional-composerjson-files", 
            "text": "To do this, your Drupal site's composer.json (located in the repo root) must have a way to read your custom project's composer.json file. Since your custom project is not hosted on Packagist or Drupal.org, you must use the wikimedia/composer-merge-plugin` package to accomplish this.  Require the  wikimedia/composer-merge-pluginin  your Drupal site's  composer.json  (located in the repo root).  composer require wikimedia/composer-merge-plugin  Reference your additional composer.json files in the extra section of your root composer.json file.  extra : {\n   merge-plugin : {\n     require : [\n       docroot/modules/custom/example/composer.json \n    ]\n  }\n}  Update your Drupal site dependencies:  composer update", 
            "title": "2. Merging in additional composer.json files"
        }, 
        {
            "location": "/drupal/drupal_composer/#update-drupal-core", 
            "text": "composer update drupal/core --with-dependencies", 
            "title": "Update Drupal core"
        }, 
        {
            "location": "/drupal/drupal_composer/#update-all-drupal-dependencies", 
            "text": "composer update", 
            "title": "Update all Drupal dependencies"
        }, 
        {
            "location": "/drupal/drupal_composer/#define-the-directories-to-which-drupal-projects-should-be-downloaded", 
            "text": "By default, Composer will download all packages to the \"vendor\" directory. Clearly, this doesn't jibe with Drupal modules, themes, profiles, and libraries. To ensure that packages are downloaded to the correct path, Drupal uses the composer/installers package and ships with configuration for the directories for your Drupal site. The drupal/drupal template does not ship with drupal-libary configuration, but you can just add it to your composer.json:  extra :  { \n     installer-paths :   { \n         core :   [ type:drupal-core ], \n         libraries/{$name} :   [ type:drupal-library ], \n         modules/contrib/{$name} :   [ type:drupal-module ], \n         profiles/contrib/{$name} :   [ type:drupal-profile ], \n         themes/contrib/{$name} :   [ type:drupal-theme ], \n         drush/{$name} :   [ type:drupal-drush ], \n         modules/custom/{$name} :   [ type:drupal-custom-module ], \n         themes/custom/{$name} :   [ type:drupal-custom-theme ] \n     }  }", 
            "title": "Define the directories to which Drupal projects should be downloaded"
        }, 
        {
            "location": "/drupal/drupal_composer/#define-the-directories-for-arbitrary-packages-that-do-not-have-a-drupal-type", 
            "text": "If you would like to place an arbitrary Composer package in a custom directory, you may use the Composer Installers Extender.  For instance, if you'd like to place the Dropzone package (which does not have a type of drupal-library) in the same directory as other Drupal libraries, you would first composer require oomphinc/composer-installers-extender, then add the following configuration to your composer.json file:  extra :  { \n     installer-paths :   { \n         libraries/{$name} :   [ \n             type:drupal-library , \n             enyo/dropzone \n         ], \n     }  }   Finally, you would composer require enyo/dropzone.", 
            "title": "Define the directories for arbitrary packages that do not have a \"drupal-*\" type"
        }, 
        {
            "location": "/drupal/drupal_composer/#apply-patches-to-downloaded-modules", 
            "text": "If you need to apply patches (depending on the project being modified, a pull request is often a better solution), you can do so with the composer-patches plugin.  To add a patch to drupal module foobar insert the patches section in the extra section of composer.json:  extra : {\n     patches : {\n         drupal/foobar : {\n             Patch description :  URL to patch \n        }\n    }\n}", 
            "title": "Apply patches to downloaded modules"
        }, 
        {
            "location": "/drupal/drupal_configuration_management/", 
            "text": "Configuration Management\n\n\nIntroduction to Drupal CMI\n\n\nConfiguration Management\n\n\nFirst of all, you need to understand, how the configuration management in Drupal 8 works. CMI allows you to export all configurations and its dependencies from the database into yml text files. To make sure, you never end up in an inconsistent state, CMI always exports everything. By default, you cannot exclude certain configurations.\n\n\nTo export the configuration you must set the export directory in your settings.php. See \nConfiguration directory\n.\n\n\nThan you can export with:\n\n\ndrush config-export\n\n\n\n\n\nIf you change some configuration on the database, these configurations will be reverted in the next deployment when you use:\n\n\ndrush config-import\n\n\n\n\n\nThis is helpful and will make sure, you have the same configuration on all your systems.\n\n\nDifferent configurations on Dev / Stage / Prod environments\n\n\nYou want to have different configurations on your environments. For example, we have installed a \u201cdevel\u201d module only on our local environment but we want to have it disabled on the live environment.\n\n\nThis can be achieved by using the \nConfiguration Split\n module.\n\n\nConfiguration split exposes a configuration entity which controls what you want to split off. Currently you can\n\n\n\n\nblacklist modules\n: any configuration that this module owns will automatically be blacklisted too.\n\n\nblacklist configuration\n: settings or configuration entities. These will be removed from the active sync directory.\n\n\ngraylist configuration\n: settings or configuration entities. These will not be removed if they are in the active sync directory, but also not exported if they are not there yet.\n\n\n\n\nAs default, we have \nDev\n / \nStage\n / \nProd\n config environments already set up and configured on our drupal projects. Those are set to inactive. You must enable the \nDev\n environment on your local environment to import / export is config. Open the \nsettings.local.php\n and add this line:\n\n\n$config[\nconfig_split.config_split.dev\n][\nstatus\n] = TRUE;\n\n\n\n\n\nNow you can use normal \ndrush\n import /export commands and \nConfiguration Split\n we'll do the magic for you:\n\n\n# To export configuration\n\n\ndrush\n \ncex\n \n-\ny\n\n\n# To import configuration\n\n\ndrush\n \ncim\n \n-\ny", 
            "title": "Configuration Management (CMI)"
        }, 
        {
            "location": "/drupal/drupal_configuration_management/#configuration-management", 
            "text": "", 
            "title": "Configuration Management"
        }, 
        {
            "location": "/drupal/drupal_configuration_management/#introduction-to-drupal-cmi", 
            "text": "Configuration Management  First of all, you need to understand, how the configuration management in Drupal 8 works. CMI allows you to export all configurations and its dependencies from the database into yml text files. To make sure, you never end up in an inconsistent state, CMI always exports everything. By default, you cannot exclude certain configurations.  To export the configuration you must set the export directory in your settings.php. See  Configuration directory .  Than you can export with:  drush config-export  If you change some configuration on the database, these configurations will be reverted in the next deployment when you use:  drush config-import  This is helpful and will make sure, you have the same configuration on all your systems.", 
            "title": "Introduction to Drupal CMI"
        }, 
        {
            "location": "/drupal/drupal_configuration_management/#different-configurations-on-dev-stage-prod-environments", 
            "text": "You want to have different configurations on your environments. For example, we have installed a \u201cdevel\u201d module only on our local environment but we want to have it disabled on the live environment.  This can be achieved by using the  Configuration Split  module.  Configuration split exposes a configuration entity which controls what you want to split off. Currently you can   blacklist modules : any configuration that this module owns will automatically be blacklisted too.  blacklist configuration : settings or configuration entities. These will be removed from the active sync directory.  graylist configuration : settings or configuration entities. These will not be removed if they are in the active sync directory, but also not exported if they are not there yet.   As default, we have  Dev  /  Stage  /  Prod  config environments already set up and configured on our drupal projects. Those are set to inactive. You must enable the  Dev  environment on your local environment to import / export is config. Open the  settings.local.php  and add this line:  $config[ config_split.config_split.dev ][ status ] = TRUE;  Now you can use normal  drush  import /export commands and  Configuration Split  we'll do the magic for you:  # To export configuration  drush   cex   - y  # To import configuration  drush   cim   - y", 
            "title": "Different configurations on Dev / Stage / Prod environments"
        }
    ]
}