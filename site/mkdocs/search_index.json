{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Soulweb Documentations\n\n\nHere you can find the Soulweb Team documentation.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-soulweb-documentations", 
            "text": "Here you can find the Soulweb Team documentation.", 
            "title": "Welcome to Soulweb Documentations"
        }, 
        {
            "location": "/drupal/drupal_development_workflow/", 
            "text": "Develpment Workflow\n\n\nIn this section is described the development workflow to adopt to handle the parallel development on our projects.\n\n\nGitflow\n\n\nThe \nGitflow Workflow\n defines a strict branching model designed around the project release. It's based on \nFeature Branch Workflow\n.\n\n\nThe core idea behind this workflow is that all feature development should take place in a dedicated branch. This encapsulation makes it easy for multiple developers to work on a particular feature without disturbing the main codebase.\n\n\nThe central repository will have two main branches:\n\n\n\n\nmaster\n branch stores the official release history\n\n\ndevelop\n branch serves as an integration branch for features during development\n\n\n\n\n1. Begin start to developing a new feature\n\n\nBefore to start developing a feature, you need an isolated branch to work on. You can request a new branch with the following command:\n\n\ngit checkout -b issue-#1060 develop\n\n\n\n\n\nThis checks out a branch called \nissue-#1060\n based on \ndevelop\n, and the -b flag tells \nGit\n to create the branch if it doesn\u2019t already exist.\n\n\nNote that the feature branch should have descriptive names:\n\n\n\n\nissue\n the title of the issue on your ticketing system\n\n\n#1060\n the ID of the issue on your ticketing system\n\n\n\n\nAs example:\n\n\ngit checkout -b animated-main-menu-#8091 develop\n\n\n\n\n\n2. Developing a feature\n\n\nWhen you feature branch is up you can develop your code and building up the feature with as many commits as necessary.\n\n\nWhen you need to commit your code you must follow a safe sequence to make sure to merge it without breaking the code and your local \ndrupal\n installation:\n\n\n# export drupal configuration\ndrush cex -y\n# commit code\ngit add ...\ngit commit -m \n...\n\n# merge\ngit pull\n# update dependencies\ncomposer install\n# clear drush cache\ndrush cc drush\n# update database\ndrush updb -y --entity-updates\n# import drupal configuration\ndrush cim -y\n# clear drupal cache\ndrush cr\n# push code\ngit push\n\n\n\n\n\n3. Finish developing a feature\n\n\nWhen the feature is complete you must file a pull request letting the rest of the team know your work is done and ready to be merged on \ndevelop\n branch.\n\n\nPull requests\n let you tell others about changes you've pushed. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before the changes are merged into the repository.\n\n\nThe pull request is managed through \ngithub\n UI. For more information, see \nCreating a pull request\n.", 
            "title": "Development Workflow"
        }, 
        {
            "location": "/drupal/drupal_development_workflow/#develpment-workflow", 
            "text": "In this section is described the development workflow to adopt to handle the parallel development on our projects.", 
            "title": "Develpment Workflow"
        }, 
        {
            "location": "/drupal/drupal_development_workflow/#gitflow", 
            "text": "The  Gitflow Workflow  defines a strict branching model designed around the project release. It's based on  Feature Branch Workflow .  The core idea behind this workflow is that all feature development should take place in a dedicated branch. This encapsulation makes it easy for multiple developers to work on a particular feature without disturbing the main codebase.  The central repository will have two main branches:   master  branch stores the official release history  develop  branch serves as an integration branch for features during development", 
            "title": "Gitflow"
        }, 
        {
            "location": "/drupal/drupal_development_workflow/#1-begin-start-to-developing-a-new-feature", 
            "text": "Before to start developing a feature, you need an isolated branch to work on. You can request a new branch with the following command:  git checkout -b issue-#1060 develop  This checks out a branch called  issue-#1060  based on  develop , and the -b flag tells  Git  to create the branch if it doesn\u2019t already exist.  Note that the feature branch should have descriptive names:   issue  the title of the issue on your ticketing system  #1060  the ID of the issue on your ticketing system   As example:  git checkout -b animated-main-menu-#8091 develop", 
            "title": "1. Begin start to developing a new feature"
        }, 
        {
            "location": "/drupal/drupal_development_workflow/#2-developing-a-feature", 
            "text": "When you feature branch is up you can develop your code and building up the feature with as many commits as necessary.  When you need to commit your code you must follow a safe sequence to make sure to merge it without breaking the code and your local  drupal  installation:  # export drupal configuration\ndrush cex -y\n# commit code\ngit add ...\ngit commit -m  ... \n# merge\ngit pull\n# update dependencies\ncomposer install\n# clear drush cache\ndrush cc drush\n# update database\ndrush updb -y --entity-updates\n# import drupal configuration\ndrush cim -y\n# clear drupal cache\ndrush cr\n# push code\ngit push", 
            "title": "2. Developing a feature"
        }, 
        {
            "location": "/drupal/drupal_development_workflow/#3-finish-developing-a-feature", 
            "text": "When the feature is complete you must file a pull request letting the rest of the team know your work is done and ready to be merged on  develop  branch.  Pull requests  let you tell others about changes you've pushed. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before the changes are merged into the repository.  The pull request is managed through  github  UI. For more information, see  Creating a pull request .", 
            "title": "3. Finish developing a feature"
        }, 
        {
            "location": "/drupal/drupal_vm/", 
            "text": "Development Envirorment\n\n\nDrupal VM\n\n\nDrupal VM\n is A VM for local Drupal development, built with Vagrant + Ansible.\n\n\n\n\nQuick Start Guide\n\n\nDrupal VM Documentation\n  \n\n\n\n\nRequirements\n\n\n1. Virtualbox and Vagrant\n\n\nDownload and install \nVagrant\n and \nVirtualBox\n and keep them updated.\n\n\n2. Xcode\n\n\nInstall \nXcode\n.\n\n\n3. Ansible\n\n\nInstall \nAnsible\n via \npip\n.\n\n\nOpen a \nTerminal\n and run:\n\n\nsudo easy_install pip\nsudo pip install ansible --quiet\n\n\n\n\n\nTo update \nAnsible\n:\n\n\nsudo pip install ansible --upgrade\n\n\n\n\n\n4. Vagrant Plugins\n\n\nInstall the needed Vagrant plugins.\n\n\nFrom the \nTerminal\n run:\n\n\nvagrant plugin install vagrant-vbguest\nvagrant plugin install vagrant-hostsupdater\nvagrant plugin install vagrant-auto_network\nvagrant plugin install vagrant-cachier\n\n\n\n\n\nBuild Drupal VM from scratch\n\n\n1. Download\n\n\nClone the \nDrupal VM\n project. From the \nTerminal\n run:\n\n\ngit clone https://github.com/geerlingguy/drupal-vm.git yourprojectnamevm\n\n\n\n\n\nEnter on the created folder \nyourprojectnamevm\n.\n\n\n2. config.yml\n\n\nThe main configuration file of the project. Commonly this is a copy of \ndefault.config.yml\n with the values tweaked to your own project.\n\n\nCopy \ndefault.config.yml\n as \nconfig.yml\n.\n\n\nOpen the \nconfig.yml\n with your favorite editor and edit the following lines:\n\n\nvagrant_hostname: yourprojectnamevm.dev\nvagrant_machine_name: yourprojectnamevm\nvagrant_ip: 0.0.0.0\n\n\n\n\n\nSet the \nlocal\n and \nremote\n (\nvagrant\n) folders to sync:\n\n\nvagrant_synced_folders:\n  # The first synced folder will be used for the default Drupal installation, if\n  # any of the build_* settings are \ntrue\n. By default the folder is set to\n  # the drupal-vm folder.\n  - local_path: ~/Sites/yourprojectnamevm\n    destination: /var/www\n    type: nfs\n    create: true\n\n\n\n\n\nConfigure the \ndrupal composer install dir\n to the directory destination of above:\n\n\ndrupal_composer_install_dir: \n/var/www/yourprojectnamevm/drupal\u201d\n\n\n\n\n\nBy default, the \nDrupal VM\n includes extras packages listed under \ninstalled_extras\n. If you don't want or need one or more of those extras, just comment out/in them from the list. Our default list is:\n\n\ninstalled_extras:\n  - adminer\n  # - blackfire\n  - drupalconsole\n  - drush\n  # - elasticsearch\n  # - java\n  - mailhog\n  # - memcached\n  # - newrelic\n  # - nodejs\n  - pimpmylog\n  # - redis\n  # - ruby\n  # - selenium\n  # - solr\n  # - tideways\n  # - upload-progress\n  # - varnish\n  - xdebug\n  # - xhprof\n\n\n\n\n\nSelect the desidered php version. Currently-supported versions: \n5.6\n, \n7.0\n, \n7.1\n. Our default for  \nDrupal 8\n projects is \n7.1\n:\n\n\nphp_version: \u201c7.1\n\n\n\n\n\n\nSet \nphp memory limit\n at least to \n256M\n:\n\n\nphp_memory_limit: \n256M\n\nphp_opcache_memory_consumption: \n256\n\n\n\n\n\n\nContinue to modify config.yml to your liking.\n\n\n3. Build up\n\n\nOpen Terminal, \ncd\n to the vagrant directory (containing the Vagrantfile and the config.yml file).\n\n\nType in \nvagrant up\n, and let \nVagrant\n do its magic.\n\n\nWhen it\u2019s done, open the browser and type your \nvagrant_hostname\n (e.g. \ndrupaltest.dev\n), in the address bar, to navigate on your drupal installation.\n\n\nDefault Drupal credentials to login are specified in your \nconfig.yml\n\n\ndrupal_account_name: admin\ndrupal_account_pass: admin\n\n\n\n\n\nAt the address \ndashboard.your_vagrant_hostname.dev\n (e.g. \ndashboard.drupaltest.dev\n) you can see your \nDrupalVM\n dashboard.\n\n\nBuild Drupal VM from existing Drupal project\n\n\nThis is in the scenario where you have an existing existing drupal project (\ncomposer\n based) on \ngit\n and you want to start a new \nDrupal VM\n to local development.\n\n\n1. Download\n\n\nClone the \nDrupal VM\n project. From the \nTerminal\n run:\n\n\ngit clone https://github.com/geerlingguy/drupal-vm.git yourprojectnamevm\n\n\n\n\n\nEnter on the created folder \nyourprojectnamevm\n.\n\n\n2. config.yml\n\n\nThe main configuration file of the project. Commonly this is a copy of \ndefault.config.yml\n with the values tweaked to your own project.\n\n\nCopy \ndefault.config.yml\n as \nconfig.yml\n.\n\n\nOpen the \nconfig.yml\n with your favorite editor and edit the following lines:\n\n\nvagrant_hostname: yourprojectnamevm.dev\nvagrant_machine_name: yourprojectnamevm\nvagrant_ip: 0.0.0.0\n\n\n\n\n\nSet the \nlocal\n and \nremote\n (\nvagrant\n) folders to sync:\n\n\nvagrant_synced_folders:\n  # The first synced folder will be used for the default Drupal installation, if\n  # any of the build_* settings are \ntrue\n. By default the folder is set to\n  # the drupal-vm folder.\n  - local_path: ~/Sites/yourprojectnamevm\n    destination: /var/www\n    type: nfs\n    create: true\n\n\n\n\n\nConfigure the \ndrupal composer install dir\n to the directory destination of above:\n\n\ndrupal_composer_install_dir: \n/var/www/yourprojectnamevm/drupal\u201d\n\n\n\n\n\nSet \nDrupal VM\n to use your \ncomposer.json\n in order to automatically install your \ncomposer\n dependencies:\n\n\ndrupal_build_makefile: false\n...\ndrupal_composer_path: false\n...\ndrupal_build_composer: false\n...\ndrupal_build_composer_project: false\n\n\n\n\n\nWe need to disable the automatic drupal install site because, for now, in this scenario it doesn't work:\n\n\ndrupal_install_site: false\n\n\n\n\n\nWe'll manually install it later (see \nManually install Drupal site\n)\n\n\nBy default, the \nDrupal VM\n includes extras packages listed under \ninstalled_extras\n. If you don't want or need one or more of those extras, just comment out/in them from the list. Our default list is:\n\n\ninstalled_extras:\n  - adminer\n  # - blackfire\n  - drupalconsole\n  - drush\n  # - elasticsearch\n  # - java\n  - mailhog\n  # - memcached\n  # - newrelic\n  # - nodejs\n  - pimpmylog\n  # - redis\n  # - ruby\n  # - selenium\n  # - solr\n  # - tideways\n  # - upload-progress\n  # - varnish\n  - xdebug\n  # - xhprof\n\n\n\n\n\nSelect the desidered php version. Currently-supported versions: \n5.6\n, \n7.0\n, \n7.1\n. Our default for  \nDrupal 8\n projects is \n7.1\n:\n\n\nphp_version: \u201c7.1\n\n\n\n\n\n\nSet \nphp memory limit\n at least to \n256M\n:\n\n\nphp_memory_limit: \n256M\n\nphp_opcache_memory_consumption: \n256\n\n\n\n\n\n\nContinue to modify config.yml to your liking.\n\n\n3. Download your Drupal project site\n\n\nCreate, on your local machine, the folder where to clone the  \nDrupal\n project site into the directory set as \nlocal_path\n on your \nconfig.yml\n (e.g. \n~/Sites/yourprojectnamevm\n). The folder name must match the one set on your \nconfig.yml\n at the line:\n\n\ndrupal_composer_install_dir: \n/var/www/yourprojectnamevm/drupal\n\n\n\n\n\n\nCreate the folder:\n\n\ncd ~/Sites/yourprojectnamevm\nmkdir yourprojectnamevm\ncd yourprojectnamevm\n\n\n\n\n\nClone your \nDrupal\n project site into the created folder:\n\n\ngit clone https://github.com/yourrepository/projectname.git drupal\n\n\n\n\n\n4. Build up\n\n\nOpen Terminal, \ncd\n to the vagrant directory (containing the Vagrantfile and the config.yml file).\n\n\nType in \nvagrant up\n, and let \nVagrant\n do its magic.\n\n\n5. Manually install Drupal site\n\n\nWhen the \nVM\n is up and running, enter on it (\nvagrant ssh\n).\n\n\nInstall the \ncomposer\n dependencies:\n\n\ncd /var/www/yourprojectnamevm/drupal\ncomposer install\n\n\n\n\n\nWe'll use the \nConfiguration Installer\n profile to install your drupal site with your configuration.\n\n\nMake sure to already have it in your \nDrupal\n project as \ncomposer\n dependencies (check the \ncomposer.json\n). If not, add it to your \ncomposer\n requirements:\n\n\ncomposer require drupal/config_installer\n\n\n\n\n\nGo to your drupal site folder:\n\n\ncd /var/www/yourprojectnamevm/drupal/web\n\n\n\n\n\nRun the \ndrupal\n installation (replace the \ndb\n parameters) from your \nvagrant\n machine:\n\n\ndrush site-install config_installer config_installer_sync_configure_form.sync_directory=../config/sync --db-url=mysql://dbuser:dbpass@127.0.0.1:dbport/dbname --account-name=admin --account-pass=admin -y\n\n\n\n\n\nwhere \nconfig_installer_sync_configure_form.sync_directory\n is set to the folder that contains your \ndrupal\n default configuration. Our projects \ndefault\n is \n../config/sync\n.\n\n\nIf you didn't change the standard \nmysql\n db settings in your \nvagrant\n machine the command should be:\n\n\ndrush site-install config_installer config_installer_sync_configure_form.sync_directory=../config/sync --db-url=mysql://drupal:drupal@127.0.0.1/drupal --account-name=admin --account-pass=admin -y\n\n\n\n\n\nWhen it\u2019s done, open the browser and type your \nvagrant_hostname\n (e.g. \ndrupaltest.dev\n), in the address bar, to navigate on your drupal installation.\n\n\n\n\nConfiguration Split\n\n\nin case your \ndrupal\n project config is split in different folder than the \ndefault\n, with \nConfiguration Split\n, and you need to import them too, for each of the split config you need to import run:\n\n\ndrush csim split_machine_name\n\n\n\n\n\nReplace \nsplit_machine_name\n with your configuration split \nmachine name\n\n\n\n\nDefault Drupal credentials to login are specified in your \nconfig.yml\n\n\ndrupal_account_name: admin\ndrupal_account_pass: admin\n\n\n\n\n\nAt the address \ndashboard.your_vagrant_hostname.dev\n (e.g. \ndashboard.drupaltest.dev\n) you can see your \nDrupalVM\n dashboard.\n\n\nBuild Drupal VM for multisite\n\n\nFor \nmultisite\n installations, make the changes outlined above, but, using the \napache_vhosts\n variable, configure as many domains pointing to the same \ndocroot\n as you need:\n\n\napache_vhosts:\n  # Drupal VM\ns default domain, evaluating to whatever `vagrant_hostname` is set to (drupalvm.dev by default).\n  - servername: \n{{ drupal_domain }}\n\n    serveralias: \nwww.{{ drupal_domain }}\n\n    documentroot: \n{{ drupal_core_path }}\n\n    extra_parameters: \n{{ apache_vhost_php_fpm_parameters }}\n\n\n  - servername: \nlocal.second-drupal-site.com\n\n    documentroot: \n{{ drupal_core_path }}\n\n    extra_parameters: \n{{ apache_vhost_php_fpm_parameters }}\n\n\n  - servername: \nlocal.third-drupal-site.com\n\n    documentroot: \n{{ drupal_core_path }}\n\n    extra_parameters: \n{{ apache_vhost_php_fpm_parameters }}\n\n\n\n\n\n\nIf you need additional databases and database users, add them to the list of \nmysql_databases\n and \nmysql_users\n:\n\n\nmysql_databases:\n  - name: drupal\n    encoding: utf8\n    collation: utf8_general_ci\n  - name: drupal_two\n    encoding: utf8\n    collation: utf8_general_ci\n\nmysql_users:\n  - name: drupal\n    host: \n%\n\n    password: drupal\n    priv: \ndrupal.*:ALL\n\n  - name: drupal-two\n    host: \n%\n\n    password: drupal-two\n    priv: \ndrupal_two.*:ALL\n\n\n\n\n\n\nIf you let the \nVM\n to install your main \ndrupal\n site (\ndrupal_install_site: true\n), make sure to set the appropriate \ndrupal\n host and database for the installation:\n\n\ndrupal_domain: \n{{ vagrant_hostname }}\n\n...\ndrupal_db_user: drupal\ndrupal_db_password: drupal\ndrupal_db_name: drupal\n\n\n\n\n\nUpdating Drupal VM\n\n\nDrupal VM follows semantic versioning, which means your configuration should continue working (potentially with very minor modifications) throughout a major release cycle. Here is the process to follow when updating Drupal VM between minor releases:\n\n\n\n\nRead through the \nrelease notes\n and add/modify \nconfig.yml\n variables mentioned therein.\n\n\nDo a diff of your \nconfig.yml\n with the updated \ndefault.config.yml\n (e.g. \ncurl https://raw.githubusercontent.com/geerlingguy/drupal-vm/master/default.config.yml | git diff --no-index config.yml -\n).\n\n\nRun \nvagrant provision\n to provision the VM, incorporating all the latest changes.\n\n\n\n\nFor major version upgrades (e.g. 3.x.x to 4.x.x), it may be simpler to destroy the VM (\nvagrant destroy\n) then build a fresh new VM (\nvagrant up\n) using the new version of Drupal VM.", 
            "title": "Drupal VM"
        }, 
        {
            "location": "/drupal/drupal_vm/#development-envirorment", 
            "text": "", 
            "title": "Development Envirorment"
        }, 
        {
            "location": "/drupal/drupal_vm/#drupal-vm", 
            "text": "Drupal VM  is A VM for local Drupal development, built with Vagrant + Ansible.   Quick Start Guide  Drupal VM Documentation", 
            "title": "Drupal VM"
        }, 
        {
            "location": "/drupal/drupal_vm/#requirements", 
            "text": "", 
            "title": "Requirements"
        }, 
        {
            "location": "/drupal/drupal_vm/#1-virtualbox-and-vagrant", 
            "text": "Download and install  Vagrant  and  VirtualBox  and keep them updated.", 
            "title": "1. Virtualbox and Vagrant"
        }, 
        {
            "location": "/drupal/drupal_vm/#2-xcode", 
            "text": "Install  Xcode .", 
            "title": "2. Xcode"
        }, 
        {
            "location": "/drupal/drupal_vm/#3-ansible", 
            "text": "Install  Ansible  via  pip .  Open a  Terminal  and run:  sudo easy_install pip\nsudo pip install ansible --quiet  To update  Ansible :  sudo pip install ansible --upgrade", 
            "title": "3. Ansible"
        }, 
        {
            "location": "/drupal/drupal_vm/#4-vagrant-plugins", 
            "text": "Install the needed Vagrant plugins.  From the  Terminal  run:  vagrant plugin install vagrant-vbguest\nvagrant plugin install vagrant-hostsupdater\nvagrant plugin install vagrant-auto_network\nvagrant plugin install vagrant-cachier", 
            "title": "4. Vagrant Plugins"
        }, 
        {
            "location": "/drupal/drupal_vm/#build-drupal-vm-from-scratch", 
            "text": "", 
            "title": "Build Drupal VM from scratch"
        }, 
        {
            "location": "/drupal/drupal_vm/#1-download", 
            "text": "Clone the  Drupal VM  project. From the  Terminal  run:  git clone https://github.com/geerlingguy/drupal-vm.git yourprojectnamevm  Enter on the created folder  yourprojectnamevm .", 
            "title": "1. Download"
        }, 
        {
            "location": "/drupal/drupal_vm/#2-configyml", 
            "text": "The main configuration file of the project. Commonly this is a copy of  default.config.yml  with the values tweaked to your own project.  Copy  default.config.yml  as  config.yml .  Open the  config.yml  with your favorite editor and edit the following lines:  vagrant_hostname: yourprojectnamevm.dev\nvagrant_machine_name: yourprojectnamevm\nvagrant_ip: 0.0.0.0  Set the  local  and  remote  ( vagrant ) folders to sync:  vagrant_synced_folders:\n  # The first synced folder will be used for the default Drupal installation, if\n  # any of the build_* settings are  true . By default the folder is set to\n  # the drupal-vm folder.\n  - local_path: ~/Sites/yourprojectnamevm\n    destination: /var/www\n    type: nfs\n    create: true  Configure the  drupal composer install dir  to the directory destination of above:  drupal_composer_install_dir:  /var/www/yourprojectnamevm/drupal\u201d  By default, the  Drupal VM  includes extras packages listed under  installed_extras . If you don't want or need one or more of those extras, just comment out/in them from the list. Our default list is:  installed_extras:\n  - adminer\n  # - blackfire\n  - drupalconsole\n  - drush\n  # - elasticsearch\n  # - java\n  - mailhog\n  # - memcached\n  # - newrelic\n  # - nodejs\n  - pimpmylog\n  # - redis\n  # - ruby\n  # - selenium\n  # - solr\n  # - tideways\n  # - upload-progress\n  # - varnish\n  - xdebug\n  # - xhprof  Select the desidered php version. Currently-supported versions:  5.6 ,  7.0 ,  7.1 . Our default for   Drupal 8  projects is  7.1 :  php_version: \u201c7.1   Set  php memory limit  at least to  256M :  php_memory_limit:  256M \nphp_opcache_memory_consumption:  256   Continue to modify config.yml to your liking.", 
            "title": "2. config.yml"
        }, 
        {
            "location": "/drupal/drupal_vm/#3-build-up", 
            "text": "Open Terminal,  cd  to the vagrant directory (containing the Vagrantfile and the config.yml file).  Type in  vagrant up , and let  Vagrant  do its magic.  When it\u2019s done, open the browser and type your  vagrant_hostname  (e.g.  drupaltest.dev ), in the address bar, to navigate on your drupal installation.  Default Drupal credentials to login are specified in your  config.yml  drupal_account_name: admin\ndrupal_account_pass: admin  At the address  dashboard.your_vagrant_hostname.dev  (e.g.  dashboard.drupaltest.dev ) you can see your  DrupalVM  dashboard.", 
            "title": "3. Build up"
        }, 
        {
            "location": "/drupal/drupal_vm/#build-drupal-vm-from-existing-drupal-project", 
            "text": "This is in the scenario where you have an existing existing drupal project ( composer  based) on  git  and you want to start a new  Drupal VM  to local development.", 
            "title": "Build Drupal VM from existing Drupal project"
        }, 
        {
            "location": "/drupal/drupal_vm/#1-download_1", 
            "text": "Clone the  Drupal VM  project. From the  Terminal  run:  git clone https://github.com/geerlingguy/drupal-vm.git yourprojectnamevm  Enter on the created folder  yourprojectnamevm .", 
            "title": "1. Download"
        }, 
        {
            "location": "/drupal/drupal_vm/#2-configyml_1", 
            "text": "The main configuration file of the project. Commonly this is a copy of  default.config.yml  with the values tweaked to your own project.  Copy  default.config.yml  as  config.yml .  Open the  config.yml  with your favorite editor and edit the following lines:  vagrant_hostname: yourprojectnamevm.dev\nvagrant_machine_name: yourprojectnamevm\nvagrant_ip: 0.0.0.0  Set the  local  and  remote  ( vagrant ) folders to sync:  vagrant_synced_folders:\n  # The first synced folder will be used for the default Drupal installation, if\n  # any of the build_* settings are  true . By default the folder is set to\n  # the drupal-vm folder.\n  - local_path: ~/Sites/yourprojectnamevm\n    destination: /var/www\n    type: nfs\n    create: true  Configure the  drupal composer install dir  to the directory destination of above:  drupal_composer_install_dir:  /var/www/yourprojectnamevm/drupal\u201d  Set  Drupal VM  to use your  composer.json  in order to automatically install your  composer  dependencies:  drupal_build_makefile: false\n...\ndrupal_composer_path: false\n...\ndrupal_build_composer: false\n...\ndrupal_build_composer_project: false  We need to disable the automatic drupal install site because, for now, in this scenario it doesn't work:  drupal_install_site: false  We'll manually install it later (see  Manually install Drupal site )  By default, the  Drupal VM  includes extras packages listed under  installed_extras . If you don't want or need one or more of those extras, just comment out/in them from the list. Our default list is:  installed_extras:\n  - adminer\n  # - blackfire\n  - drupalconsole\n  - drush\n  # - elasticsearch\n  # - java\n  - mailhog\n  # - memcached\n  # - newrelic\n  # - nodejs\n  - pimpmylog\n  # - redis\n  # - ruby\n  # - selenium\n  # - solr\n  # - tideways\n  # - upload-progress\n  # - varnish\n  - xdebug\n  # - xhprof  Select the desidered php version. Currently-supported versions:  5.6 ,  7.0 ,  7.1 . Our default for   Drupal 8  projects is  7.1 :  php_version: \u201c7.1   Set  php memory limit  at least to  256M :  php_memory_limit:  256M \nphp_opcache_memory_consumption:  256   Continue to modify config.yml to your liking.", 
            "title": "2. config.yml"
        }, 
        {
            "location": "/drupal/drupal_vm/#3-download-your-drupal-project-site", 
            "text": "Create, on your local machine, the folder where to clone the   Drupal  project site into the directory set as  local_path  on your  config.yml  (e.g.  ~/Sites/yourprojectnamevm ). The folder name must match the one set on your  config.yml  at the line:  drupal_composer_install_dir:  /var/www/yourprojectnamevm/drupal   Create the folder:  cd ~/Sites/yourprojectnamevm\nmkdir yourprojectnamevm\ncd yourprojectnamevm  Clone your  Drupal  project site into the created folder:  git clone https://github.com/yourrepository/projectname.git drupal", 
            "title": "3. Download your Drupal project site"
        }, 
        {
            "location": "/drupal/drupal_vm/#4-build-up", 
            "text": "Open Terminal,  cd  to the vagrant directory (containing the Vagrantfile and the config.yml file).  Type in  vagrant up , and let  Vagrant  do its magic.", 
            "title": "4. Build up"
        }, 
        {
            "location": "/drupal/drupal_vm/#5-manually-install-drupal-site", 
            "text": "When the  VM  is up and running, enter on it ( vagrant ssh ).  Install the  composer  dependencies:  cd /var/www/yourprojectnamevm/drupal\ncomposer install  We'll use the  Configuration Installer  profile to install your drupal site with your configuration.  Make sure to already have it in your  Drupal  project as  composer  dependencies (check the  composer.json ). If not, add it to your  composer  requirements:  composer require drupal/config_installer  Go to your drupal site folder:  cd /var/www/yourprojectnamevm/drupal/web  Run the  drupal  installation (replace the  db  parameters) from your  vagrant  machine:  drush site-install config_installer config_installer_sync_configure_form.sync_directory=../config/sync --db-url=mysql://dbuser:dbpass@127.0.0.1:dbport/dbname --account-name=admin --account-pass=admin -y  where  config_installer_sync_configure_form.sync_directory  is set to the folder that contains your  drupal  default configuration. Our projects  default  is  ../config/sync .  If you didn't change the standard  mysql  db settings in your  vagrant  machine the command should be:  drush site-install config_installer config_installer_sync_configure_form.sync_directory=../config/sync --db-url=mysql://drupal:drupal@127.0.0.1/drupal --account-name=admin --account-pass=admin -y  When it\u2019s done, open the browser and type your  vagrant_hostname  (e.g.  drupaltest.dev ), in the address bar, to navigate on your drupal installation.   Configuration Split  in case your  drupal  project config is split in different folder than the  default , with  Configuration Split , and you need to import them too, for each of the split config you need to import run:  drush csim split_machine_name  Replace  split_machine_name  with your configuration split  machine name   Default Drupal credentials to login are specified in your  config.yml  drupal_account_name: admin\ndrupal_account_pass: admin  At the address  dashboard.your_vagrant_hostname.dev  (e.g.  dashboard.drupaltest.dev ) you can see your  DrupalVM  dashboard.", 
            "title": "5. Manually install Drupal site"
        }, 
        {
            "location": "/drupal/drupal_vm/#build-drupal-vm-for-multisite", 
            "text": "For  multisite  installations, make the changes outlined above, but, using the  apache_vhosts  variable, configure as many domains pointing to the same  docroot  as you need:  apache_vhosts:\n  # Drupal VM s default domain, evaluating to whatever `vagrant_hostname` is set to (drupalvm.dev by default).\n  - servername:  {{ drupal_domain }} \n    serveralias:  www.{{ drupal_domain }} \n    documentroot:  {{ drupal_core_path }} \n    extra_parameters:  {{ apache_vhost_php_fpm_parameters }} \n\n  - servername:  local.second-drupal-site.com \n    documentroot:  {{ drupal_core_path }} \n    extra_parameters:  {{ apache_vhost_php_fpm_parameters }} \n\n  - servername:  local.third-drupal-site.com \n    documentroot:  {{ drupal_core_path }} \n    extra_parameters:  {{ apache_vhost_php_fpm_parameters }}   If you need additional databases and database users, add them to the list of  mysql_databases  and  mysql_users :  mysql_databases:\n  - name: drupal\n    encoding: utf8\n    collation: utf8_general_ci\n  - name: drupal_two\n    encoding: utf8\n    collation: utf8_general_ci\n\nmysql_users:\n  - name: drupal\n    host:  % \n    password: drupal\n    priv:  drupal.*:ALL \n  - name: drupal-two\n    host:  % \n    password: drupal-two\n    priv:  drupal_two.*:ALL   If you let the  VM  to install your main  drupal  site ( drupal_install_site: true ), make sure to set the appropriate  drupal  host and database for the installation:  drupal_domain:  {{ vagrant_hostname }} \n...\ndrupal_db_user: drupal\ndrupal_db_password: drupal\ndrupal_db_name: drupal", 
            "title": "Build Drupal VM for multisite"
        }, 
        {
            "location": "/drupal/drupal_vm/#updating-drupal-vm", 
            "text": "Drupal VM follows semantic versioning, which means your configuration should continue working (potentially with very minor modifications) throughout a major release cycle. Here is the process to follow when updating Drupal VM between minor releases:   Read through the  release notes  and add/modify  config.yml  variables mentioned therein.  Do a diff of your  config.yml  with the updated  default.config.yml  (e.g.  curl https://raw.githubusercontent.com/geerlingguy/drupal-vm/master/default.config.yml | git diff --no-index config.yml - ).  Run  vagrant provision  to provision the VM, incorporating all the latest changes.   For major version upgrades (e.g. 3.x.x to 4.x.x), it may be simpler to destroy the VM ( vagrant destroy ) then build a fresh new VM ( vagrant up ) using the new version of Drupal VM.", 
            "title": "Updating Drupal VM"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/", 
            "text": "PhpStorm Project\n\n\nMake sure to have the latest \nPhpStorm\n available for a better support.\n\n\nCreate new project Vagrant based\n\n\n1. Create new project\n\n\nOpen \nPhpStorm\n and select \nCreate New Project from Existing File\n\n\n\n\nSelect \nSources file are in a local directory, no Web server is yet configured.\n\n\n\n\nSelect your \nDrupal\n installation directory on the local machine, make it the \nProject Root\n and click on \nFinish\n button\n\n\n\n\nOnce the project is created, \nPhpStorm\n will index your project files and must recognise it as a \nDrupal\n project. It should ask to enable the \nDrupal\n support. If not, enable it by yourself:\n\n\n\n\n2. Integrate Vagrant\n\n\nTo let \nPhpStorm\n find the vagrant executable run the following on your local machine:\n\n\nsudo ln -s /usr/local/bin/vagrant /usr/bin/vagrant\n\n\n\n\n\n\n\nNote\n\n\nin case the executable is in a different path then \n/usr/local/bin\n change it, you can find the vagrant path with \nwhereis vagrant\n\n\n\n\nTo integrate \nVagrant\n set the \nInstance Folder\n on the \nVagrant\n settings:\n\n\n\n\nThen select the \nCurrent Vagrant\n on \nSSH Terminal\n settings:\n\n\n\n\nCreate the new Vagrant \nDeployment\n server clicking on \n+\n button in the following settings:\n\n\n\n\nEnter a \nName\n and select Type \nSFTP\n:\n\n\n\n\nClick \nOK\n button and configure the rest as:\n\n\nSFTP host: your vagrant_hostname\nRoot path: your Drupal installation path on the vagrant machine\nUsername: vagrant \nPassword: vagrant\n\n\n\n\n\nGo on the \nMappings\n tab and set only the \nDeployment path on server\n with your \nDrupal\n installation path on the \nvagrant machine\n\n\n\n\nSet your vagrant \nPHP interpreter\n. From the following click on \n\u2026\n of \nCLI Interpreter\n:\n\n\n\n\nClick on \n+\n button and select \nRemote\n. Set the interpreter as below, selecting \nVagrant\n and setting the \nVagrant Instance Folder\n to your \nVagrant\n folder:\n\n\n\n\nGo to \nSettings\n -\n \nPHP\n -\n \nServers\n and click on \n+\n button:\n\n\n\n\nSet your \nName\n and \nHost\n. Check \nUse path mappings\n and enter the \nAbsolute path on the server\n to your \ndrupal\n installation on vagrant machine.\n\n\nAdd GitHub repository and Initial Commit\n\n\nShare the project on \nGitHub\n:\n\n\n\n\nWrite the \nNew repository name\n, select \nprivate\n, if needed, and click on \nShare\n\n\n\n\nAdd files for \ninitial commit\n and \npush\n on git by clicking on \nOK\n button\n\n\n\n\nImport to existing GitHub repository and Initial Commit\n\n\nEnable version control integration from PHPSTORM:\n\n\n\n\nSet the \nRemote\n origin of the existing \ngit\n repository adding the repository \nurl\n (e.g. \nhttps://github.com/mecmartini/soulweb-docs.git\n)\n\n\n\n\n\n\n\n\n\n\nPush the \ninitial commit\n (see \nAdd GitHub repository and Initial Commit\n).\n\n\nPlugin Requirements\n\n\nHere are listed the required PhpStorm plugins for our development workflow.\n\n\nInstall/Enable PhpStorm Plugin\n\n\nFrom your project \nsettings\n go to \nPlugin\n:\n\n\n\n\nSearch the required \nplugin\n on the list and enable it (click on the right checkbox of the \nplugin\n name).\n\n\nIf it's not listed  you must install it. Press on \nBrowse Repositories\n, search for your \nplugin\n, select it and click on \nInstall\n on the right side:\n\n\n\n\nClose the \nBrowse Repositories\n window. Now you'll find it on the list to enable it.\n\n\nDrupal Symfony Bridge Plugin\n\n\nDrupal Symfony Bridge Plugin\n\n\nProvides Symfony components support for Drupal in PhpStorm.\n\n\nPre Commit Hook Plugin\n\n\nPre Commit Hook Plugin\n\n\nPlugin that allows you to run a hook prior commiting changes to any Version Control System. Good for Version Control Systems that doesn't allow you to run pre-commit-hook on the client side.", 
            "title": "PhpStorm"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#phpstorm-project", 
            "text": "Make sure to have the latest  PhpStorm  available for a better support.", 
            "title": "PhpStorm Project"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#create-new-project-vagrant-based", 
            "text": "", 
            "title": "Create new project Vagrant based"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#1-create-new-project", 
            "text": "Open  PhpStorm  and select  Create New Project from Existing File   Select  Sources file are in a local directory, no Web server is yet configured.   Select your  Drupal  installation directory on the local machine, make it the  Project Root  and click on  Finish  button   Once the project is created,  PhpStorm  will index your project files and must recognise it as a  Drupal  project. It should ask to enable the  Drupal  support. If not, enable it by yourself:", 
            "title": "1. Create new project"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#2-integrate-vagrant", 
            "text": "To let  PhpStorm  find the vagrant executable run the following on your local machine:  sudo ln -s /usr/local/bin/vagrant /usr/bin/vagrant   Note  in case the executable is in a different path then  /usr/local/bin  change it, you can find the vagrant path with  whereis vagrant   To integrate  Vagrant  set the  Instance Folder  on the  Vagrant  settings:   Then select the  Current Vagrant  on  SSH Terminal  settings:   Create the new Vagrant  Deployment  server clicking on  +  button in the following settings:   Enter a  Name  and select Type  SFTP :   Click  OK  button and configure the rest as:  SFTP host: your vagrant_hostname\nRoot path: your Drupal installation path on the vagrant machine\nUsername: vagrant \nPassword: vagrant  Go on the  Mappings  tab and set only the  Deployment path on server  with your  Drupal  installation path on the  vagrant machine   Set your vagrant  PHP interpreter . From the following click on  \u2026  of  CLI Interpreter :   Click on  +  button and select  Remote . Set the interpreter as below, selecting  Vagrant  and setting the  Vagrant Instance Folder  to your  Vagrant  folder:   Go to  Settings  -   PHP  -   Servers  and click on  +  button:   Set your  Name  and  Host . Check  Use path mappings  and enter the  Absolute path on the server  to your  drupal  installation on vagrant machine.", 
            "title": "2. Integrate Vagrant"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#add-github-repository-and-initial-commit", 
            "text": "Share the project on  GitHub :   Write the  New repository name , select  private , if needed, and click on  Share   Add files for  initial commit  and  push  on git by clicking on  OK  button", 
            "title": "Add GitHub repository and Initial Commit"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#import-to-existing-github-repository-and-initial-commit", 
            "text": "Enable version control integration from PHPSTORM:   Set the  Remote  origin of the existing  git  repository adding the repository  url  (e.g.  https://github.com/mecmartini/soulweb-docs.git )      Push the  initial commit  (see  Add GitHub repository and Initial Commit ).", 
            "title": "Import to existing GitHub repository and Initial Commit"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#plugin-requirements", 
            "text": "Here are listed the required PhpStorm plugins for our development workflow.", 
            "title": "Plugin Requirements"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#installenable-phpstorm-plugin", 
            "text": "From your project  settings  go to  Plugin :   Search the required  plugin  on the list and enable it (click on the right checkbox of the  plugin  name).  If it's not listed  you must install it. Press on  Browse Repositories , search for your  plugin , select it and click on  Install  on the right side:   Close the  Browse Repositories  window. Now you'll find it on the list to enable it.", 
            "title": "Install/Enable PhpStorm Plugin"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#drupal-symfony-bridge-plugin", 
            "text": "Drupal Symfony Bridge Plugin  Provides Symfony components support for Drupal in PhpStorm.", 
            "title": "Drupal Symfony Bridge Plugin"
        }, 
        {
            "location": "/drupal/drupal_vm_phpstorm/#pre-commit-hook-plugin", 
            "text": "Pre Commit Hook Plugin  Plugin that allows you to run a hook prior commiting changes to any Version Control System. Good for Version Control Systems that doesn't allow you to run pre-commit-hook on the client side.", 
            "title": "Pre Commit Hook Plugin"
        }, 
        {
            "location": "/drupal/drupal_vm_xdebug/", 
            "text": "Xdebug\n\n\n1. Enable Xdebug on your Vagrant machine\n\n\nOpen the vagrant machine \nconfig.yml\n file and make sure to have the xdebug line uncommented on \ninstalled_extras\n\n\ninstalled_extras:\n      - adminer\n      # - blackfire\n      - drupalconsole\n      - drush\n      # - elasticsearch\n      # - java\n      - mailhog\n      # - memcached\n      # - newrelic\n      # - nodejs\n      - pimpmylog\n      # - redis\n      # - ruby\n      # - selenium\n      # - solr\n      # - tideways\n      # - upload-progress\n      # - varnish\n      - xdebug\n      # - xhprof\n\n\n\n\n\nMake sure to have the following lines set as:\n\n\n# XDebug configuration. XDebug is disabled by default for better performance.\nphp_xdebug_default_enable: 1\nphp_xdebug_coverage_enable: 1\n\n\n\n\n\nAdd the port \n9000\n to \nfirewall_allowed_tcp_ports\n\n\nfirewall_allowed_tcp_ports:\n  - \n22\n\n  - \n25\n\n  - \n80\n\n  - \n81\n\n  - \n443\n\n  - \n4444\n\n  - \n8000\n\n  - \n8025\n\n  - \n8080\n\n  - \n8443\n\n  - \n8983\n\n  - \n9000\n\n  - \n9200\n\n\n\n\n\n\nFrom your \nterminal\n go on the \nvagrant\n directory and run \nvagrant up --provision\n, to apply the changes on your \nvagrant\n machine, or run \nvagrant provision\n if your machine is already up.\n\n\n2. Integrate Xdebug in PhpStorm\n\n\nOn \nPhpStorm\n go to \nsettings\n.\n\n\nMake sure to have \nXdebug\n -\n \nDebug port\n set to \n9000\n:\n\n\n\n\nFrom \nPhpStorm\n click on \nEdit Configurations\u2026\n:\n\n\n\n\nClick on \n+\n button and select \nPHP Remote Debug\n:\n\n\n\n\nSelect you Server (see \nAdd GitHub repository and Initial Commit\n) and set \nIde key\n to \nPHPSTORM\n.\n\n\nInstall \nXdebug helper\n as \nChrome\n extension (also available on Firefox)\n\n\n\n\nNote\n\n\nsimilar extensions are available also for \nFirefox\n (e.g. \ntheeasiestxdebug\n).\n\n\n\n\nA new icon should appear on \nChrome\n. Right click on it and select \nOptions\n.\n\n\n\n\nSelect \nPhpStorm\n on \nIDE key\n and save it\n\n\n\n\nClick on \nXdebug helper\n icon and select \nDebug\n\n\n\n\nNow you should be ready to debug. Set a breakpoint on your Drupal \nindex.php\n clicking on the right of the code row number. A red point must appear.\n\n\n\n\nTo start to \ndebug\n click on the \nbug\n icon\n\n\n\n\nThen navigate on your \nDrupal\n installation from the browser and you will see the debugger in action\n\n\n\n\nTo continue the execution of \nDrupal\n after the \nbreakpoint\n click on \nResume Program\n (\nplay\n button on the left of \nDebugger\n tab).\n\n\nTo stop the debugger click on \nStop\n (\nstop\n button on the left of \nDebugger\n tab).\n\n\n3. Xdebug and Twig\n\n\nTo use \nXdebug\n on \nTwig\n templates make sure that:\n\n\n\n\nyou have installed and enabled the contrib \nmodule\n \ndevel\n (installed by default on \nDrupalVM\n)\n\n\nTwig\n debug is enabled (see \nDisable Drupal Caching\n)\n\n\n\n\nThen set a breakpoint into your template adding:\n\n\n{{ devel_breakpoint() }}\n\n\n\n\n\nReference on \nDrupal 8, Xdebug, and Twig\n.", 
            "title": "Xdebug"
        }, 
        {
            "location": "/drupal/drupal_vm_xdebug/#xdebug", 
            "text": "", 
            "title": "Xdebug"
        }, 
        {
            "location": "/drupal/drupal_vm_xdebug/#1-enable-xdebug-on-your-vagrant-machine", 
            "text": "Open the vagrant machine  config.yml  file and make sure to have the xdebug line uncommented on  installed_extras  installed_extras:\n      - adminer\n      # - blackfire\n      - drupalconsole\n      - drush\n      # - elasticsearch\n      # - java\n      - mailhog\n      # - memcached\n      # - newrelic\n      # - nodejs\n      - pimpmylog\n      # - redis\n      # - ruby\n      # - selenium\n      # - solr\n      # - tideways\n      # - upload-progress\n      # - varnish\n      - xdebug\n      # - xhprof  Make sure to have the following lines set as:  # XDebug configuration. XDebug is disabled by default for better performance.\nphp_xdebug_default_enable: 1\nphp_xdebug_coverage_enable: 1  Add the port  9000  to  firewall_allowed_tcp_ports  firewall_allowed_tcp_ports:\n  -  22 \n  -  25 \n  -  80 \n  -  81 \n  -  443 \n  -  4444 \n  -  8000 \n  -  8025 \n  -  8080 \n  -  8443 \n  -  8983 \n  -  9000 \n  -  9200   From your  terminal  go on the  vagrant  directory and run  vagrant up --provision , to apply the changes on your  vagrant  machine, or run  vagrant provision  if your machine is already up.", 
            "title": "1. Enable Xdebug on your Vagrant machine"
        }, 
        {
            "location": "/drupal/drupal_vm_xdebug/#2-integrate-xdebug-in-phpstorm", 
            "text": "On  PhpStorm  go to  settings .  Make sure to have  Xdebug  -   Debug port  set to  9000 :   From  PhpStorm  click on  Edit Configurations\u2026 :   Click on  +  button and select  PHP Remote Debug :   Select you Server (see  Add GitHub repository and Initial Commit ) and set  Ide key  to  PHPSTORM .  Install  Xdebug helper  as  Chrome  extension (also available on Firefox)   Note  similar extensions are available also for  Firefox  (e.g.  theeasiestxdebug ).   A new icon should appear on  Chrome . Right click on it and select  Options .   Select  PhpStorm  on  IDE key  and save it   Click on  Xdebug helper  icon and select  Debug   Now you should be ready to debug. Set a breakpoint on your Drupal  index.php  clicking on the right of the code row number. A red point must appear.   To start to  debug  click on the  bug  icon   Then navigate on your  Drupal  installation from the browser and you will see the debugger in action   To continue the execution of  Drupal  after the  breakpoint  click on  Resume Program  ( play  button on the left of  Debugger  tab).  To stop the debugger click on  Stop  ( stop  button on the left of  Debugger  tab).", 
            "title": "2. Integrate Xdebug in PhpStorm"
        }, 
        {
            "location": "/drupal/drupal_vm_xdebug/#3-xdebug-and-twig", 
            "text": "To use  Xdebug  on  Twig  templates make sure that:   you have installed and enabled the contrib  module   devel  (installed by default on  DrupalVM )  Twig  debug is enabled (see  Disable Drupal Caching )   Then set a breakpoint into your template adding:  {{ devel_breakpoint() }}  Reference on  Drupal 8, Xdebug, and Twig .", 
            "title": "3. Xdebug and Twig"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/", 
            "text": "Coder Sniffer\n\n\nCoder Sniffer\n is a library that tokenises PHP, JavaScript and CSS files and detects violations of a defined set of coding standards. It works with Drupal 6, 7, or 8.\n\n\nInstall and configure Coder Sniffer\n\n\n1. Add Coder Sniffer to your Vagrant machine\n\n\nOpen the vagrant machine \nconfig.yml\n file and add to \ncomposer_global_packages\n the line:\n\n\n- { name: drupal/coder, release: \n*\n }\n\n\n\n\n\nFrom your \nterminal\n go on the \nvagrant\n directory and run \nvagrant up --provision\n, to apply the changes on your \nvagrant\n machine, or run \nvagrant provision\n if your machine is already up.\n\n\nEnter on your \nvagrant\n machine (\nvagrant ssh\n) and run:\n\n\nphpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n\n\n\n\n\nYou can verify this has worked with:\n\n\nphpcs -i\n\n\n\n\n\nThe above command should include \nDrupalPractice\n and \nDrupal\n in the installed \ncoding standards\n list.\n\n\n2. Integrate Code Sniffer in PhpStorm\n\n\nFrom below select \n+\n and add \nCode Sniffer by Remote Interpreter\n. Select your vagrant \nPHP interpreter\n (see \nAdd GitHub repository and Initial Commit\n). In \nPHP Code Sniffer (phpcs) path\n enter \n/home/vagrant/.composer/vendor/bin/phpcs\n.\nClick on \nValidate\n to verify that has worked.\n\n\n\n\n\n\nGo under \nSettings\n -\n \nEditor\n -\n  \nInspections\n to enable and set \nPHP Code Sniffer Validation\n as below:\n\n\n\n\nInspect Code\n\n\nTo inspect your code select, from the menu, \nCode\n -\n \nInspect Code\n. On the shown window select what you wanna inspect and click \nOK\n.", 
            "title": "Coder Sniffer"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/#coder-sniffer", 
            "text": "Coder Sniffer  is a library that tokenises PHP, JavaScript and CSS files and detects violations of a defined set of coding standards. It works with Drupal 6, 7, or 8.", 
            "title": "Coder Sniffer"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/#install-and-configure-coder-sniffer", 
            "text": "", 
            "title": "Install and configure Coder Sniffer"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/#1-add-coder-sniffer-to-your-vagrant-machine", 
            "text": "Open the vagrant machine  config.yml  file and add to  composer_global_packages  the line:  - { name: drupal/coder, release:  *  }  From your  terminal  go on the  vagrant  directory and run  vagrant up --provision , to apply the changes on your  vagrant  machine, or run  vagrant provision  if your machine is already up.  Enter on your  vagrant  machine ( vagrant ssh ) and run:  phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer  You can verify this has worked with:  phpcs -i  The above command should include  DrupalPractice  and  Drupal  in the installed  coding standards  list.", 
            "title": "1. Add Coder Sniffer to your Vagrant machine"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/#2-integrate-code-sniffer-in-phpstorm", 
            "text": "From below select  +  and add  Code Sniffer by Remote Interpreter . Select your vagrant  PHP interpreter  (see  Add GitHub repository and Initial Commit ). In  PHP Code Sniffer (phpcs) path  enter  /home/vagrant/.composer/vendor/bin/phpcs .\nClick on  Validate  to verify that has worked.    Go under  Settings  -   Editor  -    Inspections  to enable and set  PHP Code Sniffer Validation  as below:", 
            "title": "2. Integrate Code Sniffer in PhpStorm"
        }, 
        {
            "location": "/drupal/drupal_vm_codersniffer/#inspect-code", 
            "text": "To inspect your code select, from the menu,  Code  -   Inspect Code . On the shown window select what you wanna inspect and click  OK .", 
            "title": "Inspect Code"
        }, 
        {
            "location": "/drupal/drupal_vm_eslint/", 
            "text": "ESLint\n\n\nESLint\n is a tool to detect errors and potential problems in \nJavaScript\n code.\n\n\nWe use it to make sure our \nJavaScript\n code is consistent and free from syntax error and leaking variables and that it can be properly minified.\n\n\nRequirements\n\n\n1. Install Node.js using Nvm\n\n\nEnsure your system has the appropriate \nC++\n compiler:\n\n\n\n\nOpen your terminal of choice\n\n\nRun \nxcode-select --install\n as a command:\n\n\nA popup will appear\n\n\nSelect Install\n\n\n\n\n\n\nAllow the download to run to completion\n\n\n\n\nTo install \nnvm\n with the \ncURL\n method, run the following command in your terminal:\n\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash\n\n\n\n\n\nAfter running the above install script, \nnvm\n should have successfully installed. To ensure that nvm is up and running on your machine, you can test it with the following command:\n\n\nnvm --version\n\n\n\n\n\nIf you are kissing the \nnvm\n command, after running the install script, you may be missing a \n.bash_profile\n.\n\n\nRun \ntouch ~/.bash_profile\n in your command line and re-run the installer script.\n\n\nIf the problem persists after that, you can open the existing \n.bash_profile\n file (using your favorite text editor) and add the following line to it:\n\n\nexport NVM_DIR=\n~/.nvm\n\n[ -s \n$NVM_DIR/nvm.sh\n ] \n \\. \n$NVM_DIR/nvm.sh\n  # This loads nvm\n\n\n\n\n\nNow you can use \nnvm\n to install \nnode.js\n. To install the latest available version of \nnode.js\n, you can use the following command:\n\n\nnvm install node\n\n\n\n\n\nNext, to use that version of \nnode.js\n in any new shell, you can simply run the use command:\n\n\nnvm use node\n\n\n\n\n\nNvm is great and makes switching between node versions easy and convenient. However, there's one caveat. If you type:\n\n\nwhich node\n\n\n\n\n\nyou will see something interesting. \nNvm\n installs \nnode.js\n inside your user's home directory. It's best to install one copy of node globally so that other users can access it, and use \nnvm\n to switch between your development versions.\n\n\nTo do this, run the following command (entering your user's password at the prompt):\n\n\nn=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local\n\n\n\n\n\nThe above command is a bit complicated, but all it's doing is copying whatever version of \nnode\n you have active via \nnvm\n into the \n/usr/local/\n directory (where user installed global files should live on a linux \nVPS\n) and setting the permissions so that all users can access them.\n\n\n\n\nChange node.js version\n\n\nIf you ever want to change the version of \nnode\n that's installed system wide, just do another \nnvm\n use \nvXX.XX.XX\n to switch your user's node to the version you want, and then re-run the above command to copy it to the system directory.\n\n\n\n\nInstall and configure ESLint\n\n\n1. Install ESLint\n\n\nWe are gonna install \nESLint\n as part of our project build locally:\n\n\nOpen your terminal of choice and move to local \ndrupal/web\n direcory of your project and run:\n\n\nnpm install eslint --save-dev\n\n\n\n\n\nMake sure the \nESLint\n is executable:\n\n\nchmod +x ./node_modules/.bin/eslint\n\n\n\n\n\nYou should then setup a configuration file:\n\n\n./node_modules/.bin/eslint --init\n\n\n\n\n\nTo ensure that ESLint is working on your machine, you can test it with the following command:\n\n\n./node_modules/.bin/eslint --version\n\n\n\n\n\n2. Git ignore ESLint files\n\n\nAdd to the \nPhpStorm\n \nVersion Control\n \nIgnored Files\n the \nESLint\n package files:\n\n\n\n\n\n\nThe files to ignore are:\n\n\n\n\nDirectory \nweb/node_modules\n\n\npackage.json\n\n\nAll the files under \nweb/\n named like \n=2.x.x\n \n=3.x.x\n \n=4.x.x\n etc.\n\n\n\n\n3. Integrate ESLint in PhpStorm\n\n\nOpen your settings and go to \nLanguage \n Frameworks \n JavaScript \n Code Quality Tools \n ESLint\n.\n\n\n\n\n\n\ncheck \nEnable\n\n\nNode interpreter\n should be pre populated, if not choose yours\n\n\npopulate \nESLint package\n with \n{yourlocalprojectdirectory}/drupal/web/node_modules/eslint\n\n\nIDE\n should automatically find your  configuration file, but you can specify path to it\n\n\nall other options you can left empty\n\n\n\n\nNow head to \nEditor \n Inspections \n JavaScript \n Code quality tools \n ESLint\n and enable it.\n\n\n\n\nInspect Code\n\n\nTo inspect your code select, from the menu, \nCode\n -\n \nInspect Code\n. On the shown window select what you wanna inspect and click \nOK\n.", 
            "title": "ESLint"
        }, 
        {
            "location": "/drupal/drupal_vm_eslint/#eslint", 
            "text": "ESLint  is a tool to detect errors and potential problems in  JavaScript  code.  We use it to make sure our  JavaScript  code is consistent and free from syntax error and leaking variables and that it can be properly minified.", 
            "title": "ESLint"
        }, 
        {
            "location": "/drupal/drupal_vm_eslint/#requirements", 
            "text": "", 
            "title": "Requirements"
        }, 
        {
            "location": "/drupal/drupal_vm_eslint/#1-install-nodejs-using-nvm", 
            "text": "Ensure your system has the appropriate  C++  compiler:   Open your terminal of choice  Run  xcode-select --install  as a command:  A popup will appear  Select Install    Allow the download to run to completion   To install  nvm  with the  cURL  method, run the following command in your terminal:  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash  After running the above install script,  nvm  should have successfully installed. To ensure that nvm is up and running on your machine, you can test it with the following command:  nvm --version  If you are kissing the  nvm  command, after running the install script, you may be missing a  .bash_profile .  Run  touch ~/.bash_profile  in your command line and re-run the installer script.  If the problem persists after that, you can open the existing  .bash_profile  file (using your favorite text editor) and add the following line to it:  export NVM_DIR= ~/.nvm \n[ -s  $NVM_DIR/nvm.sh  ]   \\.  $NVM_DIR/nvm.sh   # This loads nvm  Now you can use  nvm  to install  node.js . To install the latest available version of  node.js , you can use the following command:  nvm install node  Next, to use that version of  node.js  in any new shell, you can simply run the use command:  nvm use node  Nvm is great and makes switching between node versions easy and convenient. However, there's one caveat. If you type:  which node  you will see something interesting.  Nvm  installs  node.js  inside your user's home directory. It's best to install one copy of node globally so that other users can access it, and use  nvm  to switch between your development versions.  To do this, run the following command (entering your user's password at the prompt):  n=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local  The above command is a bit complicated, but all it's doing is copying whatever version of  node  you have active via  nvm  into the  /usr/local/  directory (where user installed global files should live on a linux  VPS ) and setting the permissions so that all users can access them.   Change node.js version  If you ever want to change the version of  node  that's installed system wide, just do another  nvm  use  vXX.XX.XX  to switch your user's node to the version you want, and then re-run the above command to copy it to the system directory.", 
            "title": "1. Install Node.js using Nvm"
        }, 
        {
            "location": "/drupal/drupal_vm_eslint/#install-and-configure-eslint", 
            "text": "", 
            "title": "Install and configure ESLint"
        }, 
        {
            "location": "/drupal/drupal_vm_eslint/#1-install-eslint", 
            "text": "We are gonna install  ESLint  as part of our project build locally:  Open your terminal of choice and move to local  drupal/web  direcory of your project and run:  npm install eslint --save-dev  Make sure the  ESLint  is executable:  chmod +x ./node_modules/.bin/eslint  You should then setup a configuration file:  ./node_modules/.bin/eslint --init  To ensure that ESLint is working on your machine, you can test it with the following command:  ./node_modules/.bin/eslint --version", 
            "title": "1. Install ESLint"
        }, 
        {
            "location": "/drupal/drupal_vm_eslint/#2-git-ignore-eslint-files", 
            "text": "Add to the  PhpStorm   Version Control   Ignored Files  the  ESLint  package files:    The files to ignore are:   Directory  web/node_modules  package.json  All the files under  web/  named like  =2.x.x   =3.x.x   =4.x.x  etc.", 
            "title": "2. Git ignore ESLint files"
        }, 
        {
            "location": "/drupal/drupal_vm_eslint/#3-integrate-eslint-in-phpstorm", 
            "text": "Open your settings and go to  Language   Frameworks   JavaScript   Code Quality Tools   ESLint .    check  Enable  Node interpreter  should be pre populated, if not choose yours  populate  ESLint package  with  {yourlocalprojectdirectory}/drupal/web/node_modules/eslint  IDE  should automatically find your  configuration file, but you can specify path to it  all other options you can left empty   Now head to  Editor   Inspections   JavaScript   Code quality tools   ESLint  and enable it.", 
            "title": "3. Integrate ESLint in PhpStorm"
        }, 
        {
            "location": "/drupal/drupal_vm_eslint/#inspect-code", 
            "text": "To inspect your code select, from the menu,  Code  -   Inspect Code . On the shown window select what you wanna inspect and click  OK .", 
            "title": "Inspect Code"
        }, 
        {
            "location": "/drupal/drupal_vm_precommit/", 
            "text": "Pre Commit Hook\n\n\nThe \nPhpStorm\n commit window already integrate the \nPerform code analysis\n tool but, for some reason, it's not able to run the \nPHP Code Sniffer Validation\n as when you launch the normal \nInspect Code\n.\n\n\nSo we need to setup an alternative way to do it properly through the git pre-commit hook.\n\n\nSetup a Git pre-commit hook to check Coding Standards\n\n\nFirst of all make sure to have the \nPre Commit Hook Plugin\n for \nPhpStorm\n installed and enabled.\n\n\nThe following instructions are to setup the \npre-commit\n hook script at the init of the project. If you are not sure that your project was already init for it you must check for:\n\n\n\n\nyour \ncomposer.json\n and look for the package \njover_be/drupal-code-check\n (probably it's under \nrequire-dev\n)\n\n\nyour \ndrupal\n root directory and look for the \npre-commit-hook.sh\n file\n\n\n\n\nIf you have both you can jump directly to \nRun the Pre Commit Code Analysis\n.\n\n\n1. Install Drupal Code Check Package\n\n\nDrupal Code CHeck\n\n\nFrom your \nvagrant\n machine on your \ndrupal\n root directory run:\n\n\ncomposer require --dev jover_be/drupal-code-check\n\n\n\n\n\n2. Pre Commit Hook Script\n\n\nThe \nPre Commit Hook Plugin\n looks for the \npre-commit-hook.sh\n file script on your project root directory. To create it, from your drupal root directory run:\n\n\ntouch pre-commit-hook.sh\n\n\n\n\n\nMake sure the \npre-commit\n script is executable:\n\n\nchmod +x pre-commit-hook.sh\n\n\n\n\n\nPopulate the script with our default. Copy and paste the content of \nDrupal Pre Commit Hook\n.\n\n\nThis script run a \nCoder Sniffer\n and \nESlint\n code analysis with syntax auto fix, so make sure to have them installed as required.\n\n\n3. Run the Pre Commit Code Analysis\n\n\nTo make the \npre-commit\n script work, you must run \ngit add\n of the files to commit before the commit itself.\n\n\nThe script is set to check only those added file to avoid to check all the modified files that could be not involved in your commit.\n\n\nTo \ngit add\n the files of your commit in \nPhpStorm\n:\n\n\n\n\nIf everything is well set, when you perform a commit, \nPhpStorm\n auto-run the Code Analysis and, in case of \nerrors\n/\nwarnings\n, it's gonna show you something like this:\n\n\n\n\nIn case of \nerrors\n/\nwarnings\n it's suggested to undone the commit and manually run the \nInspect Code\n to fix all the possible issues. A better workflow is to manually run the \nInspect Code\n before to commit.", 
            "title": "Pre Commit Hook"
        }, 
        {
            "location": "/drupal/drupal_vm_precommit/#pre-commit-hook", 
            "text": "The  PhpStorm  commit window already integrate the  Perform code analysis  tool but, for some reason, it's not able to run the  PHP Code Sniffer Validation  as when you launch the normal  Inspect Code .  So we need to setup an alternative way to do it properly through the git pre-commit hook.", 
            "title": "Pre Commit Hook"
        }, 
        {
            "location": "/drupal/drupal_vm_precommit/#setup-a-git-pre-commit-hook-to-check-coding-standards", 
            "text": "First of all make sure to have the  Pre Commit Hook Plugin  for  PhpStorm  installed and enabled.  The following instructions are to setup the  pre-commit  hook script at the init of the project. If you are not sure that your project was already init for it you must check for:   your  composer.json  and look for the package  jover_be/drupal-code-check  (probably it's under  require-dev )  your  drupal  root directory and look for the  pre-commit-hook.sh  file   If you have both you can jump directly to  Run the Pre Commit Code Analysis .", 
            "title": "Setup a Git pre-commit hook to check Coding Standards"
        }, 
        {
            "location": "/drupal/drupal_vm_precommit/#1-install-drupal-code-check-package", 
            "text": "Drupal Code CHeck  From your  vagrant  machine on your  drupal  root directory run:  composer require --dev jover_be/drupal-code-check", 
            "title": "1. Install Drupal Code Check Package"
        }, 
        {
            "location": "/drupal/drupal_vm_precommit/#2-pre-commit-hook-script", 
            "text": "The  Pre Commit Hook Plugin  looks for the  pre-commit-hook.sh  file script on your project root directory. To create it, from your drupal root directory run:  touch pre-commit-hook.sh  Make sure the  pre-commit  script is executable:  chmod +x pre-commit-hook.sh  Populate the script with our default. Copy and paste the content of  Drupal Pre Commit Hook .  This script run a  Coder Sniffer  and  ESlint  code analysis with syntax auto fix, so make sure to have them installed as required.", 
            "title": "2. Pre Commit Hook Script"
        }, 
        {
            "location": "/drupal/drupal_vm_precommit/#3-run-the-pre-commit-code-analysis", 
            "text": "To make the  pre-commit  script work, you must run  git add  of the files to commit before the commit itself.  The script is set to check only those added file to avoid to check all the modified files that could be not involved in your commit.  To  git add  the files of your commit in  PhpStorm :   If everything is well set, when you perform a commit,  PhpStorm  auto-run the Code Analysis and, in case of  errors / warnings , it's gonna show you something like this:   In case of  errors / warnings  it's suggested to undone the commit and manually run the  Inspect Code  to fix all the possible issues. A better workflow is to manually run the  Inspect Code  before to commit.", 
            "title": "3. Run the Pre Commit Code Analysis"
        }, 
        {
            "location": "/drupal/drupal_vm_phpunit/", 
            "text": "PHPUnit\n\n\n1. Integrate PHPUnit in PhpStorm\n\n\nCopy the \nweb/core/phpunit.xml.dist\n file to \nweb/core/phpunit.xml\n under your \ndrupal\n installation directory.\n\n\nEdit the created file with your favorite editor and full fill the parameters \nSIMPLETEST_DB\n, \nSIMPLETEST_BASE_URL\n and \nBROWSERTEST_OUTPUT_DIRECTORY\n. See the examples provided into the file and make sure \nBROWSERTEST_OUTPUT_DIRECTORY\n is set as the example.\n\n\nGo under \nSettings\n \n \nLanguage \n Frameworks\n \n \nPHP\n \n \nPHPUnit\n. Click on the \n+\n button and select \nBy Remote Interpreter\n\n\n\n\nSet the \nInterpreter\n as below. In \nPath to script\n and \nDefault configuration file\n substitute the directory path of your \nvagrant\n machine\n\n\n\n\n2. Set and Run PHPUnit Test\n\n\nTo run all \ndrupal\n tests go under \nEdit configurations\n. Click the \n+\n button and select \nPHPUnit\n\n\n\n\n\n\nSet only the \nName\n and the \nTest Scope\n as below:\n\n\n\n\nTo test if it works select your \nPHPUnit\n config and click on \nrun\n (\nplay button\n)\n\n\n\n\n\n\nYou can create as many \nPHPUnit\n configuration do you need, to run subset of test, setting the \nTest Runner options\n.\n\n\nThe example below shows how to setup it to run only the test of the group \ndevel\n:\n\n\n\n\nThe \n--group devel\n options is added to the \nTest Runner options\n.\n\n\nTo run multiple groups of tests:\n\n\n--group Group1,Group2,..\n\n\n\n\n\nTo exclude tests:\n\n\n--exclude-group Groupname\n\n\n\n\n\nTo run a specific method:\n\n\n--filter=MyMethodTest", 
            "title": "PHPUnit"
        }, 
        {
            "location": "/drupal/drupal_vm_phpunit/#phpunit", 
            "text": "", 
            "title": "PHPUnit"
        }, 
        {
            "location": "/drupal/drupal_vm_phpunit/#1-integrate-phpunit-in-phpstorm", 
            "text": "Copy the  web/core/phpunit.xml.dist  file to  web/core/phpunit.xml  under your  drupal  installation directory.  Edit the created file with your favorite editor and full fill the parameters  SIMPLETEST_DB ,  SIMPLETEST_BASE_URL  and  BROWSERTEST_OUTPUT_DIRECTORY . See the examples provided into the file and make sure  BROWSERTEST_OUTPUT_DIRECTORY  is set as the example.  Go under  Settings     Language   Frameworks     PHP     PHPUnit . Click on the  +  button and select  By Remote Interpreter   Set the  Interpreter  as below. In  Path to script  and  Default configuration file  substitute the directory path of your  vagrant  machine", 
            "title": "1. Integrate PHPUnit in PhpStorm"
        }, 
        {
            "location": "/drupal/drupal_vm_phpunit/#2-set-and-run-phpunit-test", 
            "text": "To run all  drupal  tests go under  Edit configurations . Click the  +  button and select  PHPUnit    Set only the  Name  and the  Test Scope  as below:   To test if it works select your  PHPUnit  config and click on  run  ( play button )    You can create as many  PHPUnit  configuration do you need, to run subset of test, setting the  Test Runner options .  The example below shows how to setup it to run only the test of the group  devel :   The  --group devel  options is added to the  Test Runner options .  To run multiple groups of tests:  --group Group1,Group2,..  To exclude tests:  --exclude-group Groupname  To run a specific method:  --filter=MyMethodTest", 
            "title": "2. Set and Run PHPUnit Test"
        }, 
        {
            "location": "/drupal/drupal_vm_functionaljavascript/", 
            "text": "Functional Javascript Testing\n\n\n1 Requirements\n\n\nMake sure you have correctly set your \nphpunit.xml\n, see \nIntegrate PHPUnit in PhpStorm\n.\n\n\n2. Install PhantomJS\n\n\nThe tests are run on a headless browser called \nPhantomJS\n. The first step is to install \nPhantomJS\n on your computer.\n\n\nOpen the vagrant machine \nconfig.yml\n file and add \nphantomjs\n to \nextra_packages\n:\n\n\nextra_packages:\n  ...\n  - phantomjs\n\n\n\n\n\nFrom your \nterminal\n go on the \nvagrant\n directory and run \nvagrant up --provision\n, to apply the changes on your \nvagrant\n machine, or run \nvagrant provision\n if your machine is already up.\n\n\nEnter in your \nvagrant\n machine (\nvagrant ssh\n) and edit the file \n/home/vagrant/.bashrc\n adding at the end:\n\n\nexport QT_QPA_PLATFORM=offscreen\n\n\n\n\n\n3. Run Tests\n\n\nOnce you've got \nPhantomJS\n you need start it to run your tests.\n\n\nFrom your vagrant machine move to your \ndrupal\n webroot (i.e. \n/var/www/drupaltestvm/drupal/web\n) and run:\n\n\nphantomjs --ssl-protocol=any --ignore-ssl-errors=true vendor/jcalderonzumba/gastonjs/src/Client/main.js 8510 1024 768\n\n\n\n\n\nNow, if everything is fine, \nPhantomJS\n is up and running. Leave this terminal open and move to a new terminal to run your tests.\n\n\nLet's run an example test to check everything works fine.\n\n\n# move to your drupal web root\ncd /var/www/drupaltestvm/drupal/web\n# run test\nphp ./core/scripts/run-tests.sh --sqlite /tmp/test.sqlite --file core/modules/views/tests/src/FunctionalJavascript/ClickSortingAJAXTest.php\n\n\n\n\n\nWith \nPhantomJS\n up you can run your Functional Javascript Tests as in \nSet and Run PHPUnit Test\n.", 
            "title": "Functional Javascript Testing"
        }, 
        {
            "location": "/drupal/drupal_vm_functionaljavascript/#functional-javascript-testing", 
            "text": "", 
            "title": "Functional Javascript Testing"
        }, 
        {
            "location": "/drupal/drupal_vm_functionaljavascript/#1-requirements", 
            "text": "Make sure you have correctly set your  phpunit.xml , see  Integrate PHPUnit in PhpStorm .", 
            "title": "1 Requirements"
        }, 
        {
            "location": "/drupal/drupal_vm_functionaljavascript/#2-install-phantomjs", 
            "text": "The tests are run on a headless browser called  PhantomJS . The first step is to install  PhantomJS  on your computer.  Open the vagrant machine  config.yml  file and add  phantomjs  to  extra_packages :  extra_packages:\n  ...\n  - phantomjs  From your  terminal  go on the  vagrant  directory and run  vagrant up --provision , to apply the changes on your  vagrant  machine, or run  vagrant provision  if your machine is already up.  Enter in your  vagrant  machine ( vagrant ssh ) and edit the file  /home/vagrant/.bashrc  adding at the end:  export QT_QPA_PLATFORM=offscreen", 
            "title": "2. Install PhantomJS"
        }, 
        {
            "location": "/drupal/drupal_vm_functionaljavascript/#3-run-tests", 
            "text": "Once you've got  PhantomJS  you need start it to run your tests.  From your vagrant machine move to your  drupal  webroot (i.e.  /var/www/drupaltestvm/drupal/web ) and run:  phantomjs --ssl-protocol=any --ignore-ssl-errors=true vendor/jcalderonzumba/gastonjs/src/Client/main.js 8510 1024 768  Now, if everything is fine,  PhantomJS  is up and running. Leave this terminal open and move to a new terminal to run your tests.  Let's run an example test to check everything works fine.  # move to your drupal web root\ncd /var/www/drupaltestvm/drupal/web\n# run test\nphp ./core/scripts/run-tests.sh --sqlite /tmp/test.sqlite --file core/modules/views/tests/src/FunctionalJavascript/ClickSortingAJAXTest.php  With  PhantomJS  up you can run your Functional Javascript Tests as in  Set and Run PHPUnit Test .", 
            "title": "3. Run Tests"
        }, 
        {
            "location": "/drupal/drupal_vm_behat/", 
            "text": "BDD with Behat\n\n\nBehat\n is an open source \nbehavior-driven development\n (\nBDD\n) tool for \nPHP\n. You can use \nBehat\n to build and run automated tests for site functionality on your \nDrupal\n sites.\n\n\n1 Requirements\n\n\nFrom your \nvagrant\n machine on your \ndrupal\n project folder, you must add the \nDrupal\n extension for \nBehat\n:\n\n\ncomposer require --dev drupal/drupal-extension\n\n\n\n\n\nSelenium2\n is needed to test \njavascript\n session. \nSelenium2\n gives you the ability to take full control of a real browser with a clean consistent proxy API.\n\n\nFirst ensure that you have the \nJava Runtime Environment\n (\nJRE\n) installed on your host machine, which is required to run Selenium. You may already have it installed, but can check with:\n\n\njava -version\n\n\n\n\n\nIf you need to install or update, Google is your friend.\n\n\nFrom your host download the \nSelenium Server\n and place it wherever you like:\n\n\n# check for the latest version at http://docs.seleniumhq.org/download/\ncurl -O http://selenium-release.storage.googleapis.com/3.4/selenium-server-standalone-3.4.0.jar\nmv selenium-server-standalone-3.4.0.jar /wherever/you/like/folder\n\n\n\n\n\nWe also need to download the browser \ndrivers\n to make \nSelenium\n deal with them:\n\n\n# download chrome driver\n# check for the latest version at https://sites.google.com/a/chromium.org/chromedriver/downloads\ncurl -L -O https://chromedriver.storage.googleapis.com/2.30/chromedriver_mac64.zip\n# uncompress it\nunzip chromedriver_mac64.zip\n# move it on exec folder and give exec permission\nchmod +x chromedriver\nsudo mv chromedriver /usr/local/bin\n\n# download firefox driver\n# check for the latest version at https://github.com/mozilla/geckodriver/releases\ncurl -L -O https://github.com/mozilla/geckodriver/releases/download/v0.18.0/geckodriver-v0.18.0-macos.tar.gz\n# uncompress it\ntar -zxvf geckodriver-v0.18.0-macos.tar.gz\n# move it on exec folder and give exec permission\nchmod +x geckodriver\nsudo mv geckodriver /usr/local/bin\n\n\n\n\n\n2. Setup Behat\n\n\nFrom your \nvagrant\n machine, on your \ndrupal\n project folder, the following steps will help you get your first Behat tests up and running!\n\n\nCreate a \nbehat.yml\n file inside the \ndocroot\n of your site (e.g. create this file alongside the rest of the \nDrupal\n codebase at \n/var/www/drupalvm/drupal/behat.yml\n), with the following contents:\n\n\nchrome:\n  autoload:\n    \n: %paths.base%/features/bootstrap\n  suites:\n    web_features:\n      paths: [ %paths.base%/features/web ]\n      contexts:\n        - WebContext\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MinkContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\n        - Drupal\\DrupalExtension\\Context\\DrushContext\n  extensions:\n    Behat\\MinkExtension:\n      goutte: ~\n      javascript_session: \nselenium2\n\n      selenium2:\n        wd_host: http://10.0.2.2:4444/wd/hub\n        browser: \nchrome\n\n      base_url: http://drupalvm.dev\n      browser_name: \nchrome\n\n    Drupal\\DrupalExtension:\n      blackbox: ~\n      api_driver: \ndrupal\n\n      drupal:\n        drupal_root: \n/var/www/drupalvm/drupal/web\n\n      region_map:\n        content: \n#content\n\n\nfirefox:\n  autoload:\n    \n: %paths.base%/features/bootstrap\n  suites:\n    web_features:\n      paths: [ %paths.base%/features/web ]\n      contexts:\n        - WebContext\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MinkContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\n        - Drupal\\DrupalExtension\\Context\\DrushContext\n  extensions:\n    Behat\\MinkExtension:\n      goutte: ~\n      javascript_session: \nselenium2\n\n      selenium2:\n        wd_host: http://10.0.2.2:4444/wd/hub\n        browser: \nfirefox\n\n      base_url: http://drupalvm.dev\n      browser_name: \nfirefox\n\n    Drupal\\DrupalExtension:\n      blackbox: ~\n      api_driver: \ndrupal\n\n      drupal:\n        drupal_root: \n/var/www/drupalvm/drupal/web\n\n      region_map:\n        content: \n#content\n\n\nsafari:\n  autoload:\n    \n: %paths.base%/features/bootstrap\n  suites:\n    web_features:\n      paths: [ %paths.base%/features/web ]\n      contexts:\n        - WebContext\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MinkContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\n        - Drupal\\DrupalExtension\\Context\\DrushContext\n  extensions:\n    Behat\\MinkExtension:\n      goutte: ~\n      javascript_session: \nselenium2\n\n      selenium2:\n        wd_host: http://10.0.2.2:4444/wd/hub\n        browser: \nsafari\n\n      base_url: http://drupalvm.dev\n      browser_name: \nsafari\n\n    Drupal\\DrupalExtension:\n      blackbox: ~\n      api_driver: \ndrupal\n\n      drupal:\n        drupal_root: \n/var/www/drupalvm/drupal/web\n\n      region_map:\n        content: \n#content\n\n\n\n\n\n\nand edit the \nwd_host\n and \ndrupal_root\n parameters of the three profile (\nchrome\n - \nfirefox\n - \nsafari\n) with your parameters.\n\n\nTo initialize the \nBehat\n features folder, where you will place test cases, you must run:\n\n\n./vendor/bin/behat --init\n\n\n\n\n\nthe \nfeatures\n folder must be created on your \nDrupal\n docroot.\n\n\n3. Run your first Behat test\n\n\nOpen up the new \nfeatures/web\n folder \nBehat\n just created. Inside that folder, create \nHomeContent.feature\n file with the following contents:\n\n\nFeature: Test DrupalContext\n  In order to prove Behat is working correctly in Drupal VM\n  As a developer\n  I need to run a simple interface test\n\n  @javascript\n  Scenario: Viewing content in a region\n    Given I am on the homepage\n    Then I should see \nNo front page content has been created yet\n in the \ncontent\n\n\n\n\n\n\n\n\nNote\n\n\nThe \n@javascript\n is needed to run \njavascript\n session, otherwise the tests will run in a \nheadless\n browser.\n\n\n\n\nFrom your host machine, move to the folder where you previously placed the \nSelenium Server\n and run it up:\n\n\ncd /my/selenium/server/standalone/folder\njava -jar selenium-server-standalone-3.4.0.jar\n\n\n\n\n\nNow you can finally run your \nBehat\n test and see the browser in action. From your \nvagrant\n machine on \ndrupal\n docroot folder run:\n\n\n# to run test on chrome\n./vendor/bin/behat -v -c behat.yml -p chrome\n\n# to run test on firefox\n./vendor/bin/behat -v -c behat.yml -p firefox\n\n# to run test on safari\n./vendor/bin/behat -v -c behat.yml -p safari\n\n\n\n\n\nIf everything worked out, you\u2019ll see \nSelenium\n open up a new instance of the selected browser profile and drive it through the test suites.", 
            "title": "BDD with Behat"
        }, 
        {
            "location": "/drupal/drupal_vm_behat/#bdd-with-behat", 
            "text": "Behat  is an open source  behavior-driven development  ( BDD ) tool for  PHP . You can use  Behat  to build and run automated tests for site functionality on your  Drupal  sites.", 
            "title": "BDD with Behat"
        }, 
        {
            "location": "/drupal/drupal_vm_behat/#1-requirements", 
            "text": "From your  vagrant  machine on your  drupal  project folder, you must add the  Drupal  extension for  Behat :  composer require --dev drupal/drupal-extension  Selenium2  is needed to test  javascript  session.  Selenium2  gives you the ability to take full control of a real browser with a clean consistent proxy API.  First ensure that you have the  Java Runtime Environment  ( JRE ) installed on your host machine, which is required to run Selenium. You may already have it installed, but can check with:  java -version  If you need to install or update, Google is your friend.  From your host download the  Selenium Server  and place it wherever you like:  # check for the latest version at http://docs.seleniumhq.org/download/\ncurl -O http://selenium-release.storage.googleapis.com/3.4/selenium-server-standalone-3.4.0.jar\nmv selenium-server-standalone-3.4.0.jar /wherever/you/like/folder  We also need to download the browser  drivers  to make  Selenium  deal with them:  # download chrome driver\n# check for the latest version at https://sites.google.com/a/chromium.org/chromedriver/downloads\ncurl -L -O https://chromedriver.storage.googleapis.com/2.30/chromedriver_mac64.zip\n# uncompress it\nunzip chromedriver_mac64.zip\n# move it on exec folder and give exec permission\nchmod +x chromedriver\nsudo mv chromedriver /usr/local/bin\n\n# download firefox driver\n# check for the latest version at https://github.com/mozilla/geckodriver/releases\ncurl -L -O https://github.com/mozilla/geckodriver/releases/download/v0.18.0/geckodriver-v0.18.0-macos.tar.gz\n# uncompress it\ntar -zxvf geckodriver-v0.18.0-macos.tar.gz\n# move it on exec folder and give exec permission\nchmod +x geckodriver\nsudo mv geckodriver /usr/local/bin", 
            "title": "1 Requirements"
        }, 
        {
            "location": "/drupal/drupal_vm_behat/#2-setup-behat", 
            "text": "From your  vagrant  machine, on your  drupal  project folder, the following steps will help you get your first Behat tests up and running!  Create a  behat.yml  file inside the  docroot  of your site (e.g. create this file alongside the rest of the  Drupal  codebase at  /var/www/drupalvm/drupal/behat.yml ), with the following contents:  chrome:\n  autoload:\n     : %paths.base%/features/bootstrap\n  suites:\n    web_features:\n      paths: [ %paths.base%/features/web ]\n      contexts:\n        - WebContext\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MinkContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\n        - Drupal\\DrupalExtension\\Context\\DrushContext\n  extensions:\n    Behat\\MinkExtension:\n      goutte: ~\n      javascript_session:  selenium2 \n      selenium2:\n        wd_host: http://10.0.2.2:4444/wd/hub\n        browser:  chrome \n      base_url: http://drupalvm.dev\n      browser_name:  chrome \n    Drupal\\DrupalExtension:\n      blackbox: ~\n      api_driver:  drupal \n      drupal:\n        drupal_root:  /var/www/drupalvm/drupal/web \n      region_map:\n        content:  #content \n\nfirefox:\n  autoload:\n     : %paths.base%/features/bootstrap\n  suites:\n    web_features:\n      paths: [ %paths.base%/features/web ]\n      contexts:\n        - WebContext\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MinkContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\n        - Drupal\\DrupalExtension\\Context\\DrushContext\n  extensions:\n    Behat\\MinkExtension:\n      goutte: ~\n      javascript_session:  selenium2 \n      selenium2:\n        wd_host: http://10.0.2.2:4444/wd/hub\n        browser:  firefox \n      base_url: http://drupalvm.dev\n      browser_name:  firefox \n    Drupal\\DrupalExtension:\n      blackbox: ~\n      api_driver:  drupal \n      drupal:\n        drupal_root:  /var/www/drupalvm/drupal/web \n      region_map:\n        content:  #content \n\nsafari:\n  autoload:\n     : %paths.base%/features/bootstrap\n  suites:\n    web_features:\n      paths: [ %paths.base%/features/web ]\n      contexts:\n        - WebContext\n        - Drupal\\DrupalExtension\\Context\\DrupalContext\n        - Drupal\\DrupalExtension\\Context\\MinkContext\n        - Drupal\\DrupalExtension\\Context\\MessageContext\n        - Drupal\\DrupalExtension\\Context\\DrushContext\n  extensions:\n    Behat\\MinkExtension:\n      goutte: ~\n      javascript_session:  selenium2 \n      selenium2:\n        wd_host: http://10.0.2.2:4444/wd/hub\n        browser:  safari \n      base_url: http://drupalvm.dev\n      browser_name:  safari \n    Drupal\\DrupalExtension:\n      blackbox: ~\n      api_driver:  drupal \n      drupal:\n        drupal_root:  /var/www/drupalvm/drupal/web \n      region_map:\n        content:  #content   and edit the  wd_host  and  drupal_root  parameters of the three profile ( chrome  -  firefox  -  safari ) with your parameters.  To initialize the  Behat  features folder, where you will place test cases, you must run:  ./vendor/bin/behat --init  the  features  folder must be created on your  Drupal  docroot.", 
            "title": "2. Setup Behat"
        }, 
        {
            "location": "/drupal/drupal_vm_behat/#3-run-your-first-behat-test", 
            "text": "Open up the new  features/web  folder  Behat  just created. Inside that folder, create  HomeContent.feature  file with the following contents:  Feature: Test DrupalContext\n  In order to prove Behat is working correctly in Drupal VM\n  As a developer\n  I need to run a simple interface test\n\n  @javascript\n  Scenario: Viewing content in a region\n    Given I am on the homepage\n    Then I should see  No front page content has been created yet  in the  content    Note  The  @javascript  is needed to run  javascript  session, otherwise the tests will run in a  headless  browser.   From your host machine, move to the folder where you previously placed the  Selenium Server  and run it up:  cd /my/selenium/server/standalone/folder\njava -jar selenium-server-standalone-3.4.0.jar  Now you can finally run your  Behat  test and see the browser in action. From your  vagrant  machine on  drupal  docroot folder run:  # to run test on chrome\n./vendor/bin/behat -v -c behat.yml -p chrome\n\n# to run test on firefox\n./vendor/bin/behat -v -c behat.yml -p firefox\n\n# to run test on safari\n./vendor/bin/behat -v -c behat.yml -p safari  If everything worked out, you\u2019ll see  Selenium  open up a new instance of the selected browser profile and drive it through the test suites.", 
            "title": "3. Run your first Behat test"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/", 
            "text": "Basic Configuration\n\n\nFrom scratch\n\n\n1. .gitignore\n\n\nDefault \n.gitignore\n to use on our Drupal 8 projects:\n\n\n# Ignore directories generated by Composer\n/drush/contrib/\n/vendor/\n/web/core/\n/web/modules/contrib/\n/web/themes/contrib/\n/web/profiles/contrib/\n/web/libraries/\n\n# Ignore sensitive information\n/web/sites/*/settings.php\n/web/sites/*/settings.local.php\n\n# Ignore Drupal\ns file directory\n/web/sites/*/files/\n\n# Ignore SimpleTest multi-site environment.\n/web/sites/simpletest\n\n# Ignore files generated by PhpStorm\n/.idea/\n\n\n\n\n\nYou can add more if you need. You must not remove the defaults.\n\n\n2. Create and enable shared settings\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) and is \nsettings.php\n writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\nchmod +w sites/default/settings.php\n\n\n\n\n\nOpen \nsettings.php\n file in \nsites/default\n and add these lines to the end:\n\n\nif (file_exists($app_root . \n/\n . $site_path . \n/settings.shared.php\n)) {\n  include $app_root . \n/\n . $site_path . \n/settings.shared.php\n;\n}\n\n\n\n\n\nThis will include the shared settings file as part of Drupal's settings file.\n\n\nIn \nsites/default\n create the file \nsettings.shared.php\n with this code:\n\n\n?php\n\n/**\n * Trusted host configuration.\n *\n * Drupal core can use the Symfony trusted host mechanism to prevent HTTP Host\n * header spoofing.\n *\n * To enable the trusted host mechanism, you enable your allowable hosts\n * in $settings[\ntrusted_host_patterns\n]. This should be an array of regular\n * expression patterns, without delimiters, representing the hosts you would\n * like to allow.\n *\n * For example:\n * @code\n * $settings[\ntrusted_host_patterns\n] = array(\n *   \n^www\\.example\\.com$\n,\n * );\n * @endcode\n * will allow the site to only run from www.example.com.\n *\n * If you are running multisite, or if you are running your site from\n * different domain names (eg, you don\nt redirect http://www.example.com to\n * http://example.com), you should specify all of the host patterns that are\n * allowed by your site.\n *\n * For example:\n * @code\n * $settings[\ntrusted_host_patterns\n] = array(\n *   \n^example\\.com$\n,\n *   \n^.+\\.example\\.com$\n,\n *   \n^example\\.org$\n,\n *   \n^.+\\.example\\.org$\n,\n * );\n * @endcode\n * will allow the site to run off of all variants of example.com and\n * example.org, with all subdomains included.\n */\n$settings[\ntrusted_host_patterns\n] = array(\n  \n^yourprojectnamevm\\.dev$\n,\n);\n\n\n\n\n\nMake sure to edit the setting with your host.\n\n\n3. Create and enable local settings\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\n\n\n\n\n\nCopy and rename the \nsites/example.settings.local.php\n to \nsites/default/settings.local.php\n:\n\n\ncp sites/example.settings.local.php sites/default/settings.local.php\n\n\n\n\n\nThis will include the local settings file as part of Drupal's settings file.\n\n\nOpen the \nsettings.local.php\n created and add your local local \nhost\n to on \ntrusted host patterns\n adding these lines to the end:\n\n\n$settings[\ntrusted_host_patterns\n][] = \nyourprojectnamevm.dev\n;\n\n\n\n\n\nIf you have more then one host (e.g. for \nmultisite\n) add all of them.\n\n\nOpen \nsettings.php\n file in \nsites/default\n and add these lines to the end:\n\n\nif (file_exists($app_root . \n/\n . $site_path . \n/settings.local.php\n)) {\n   include $app_root . \n/\n . $site_path . \n/settings.local.php\n;\n}\n\n\n\n\n\n4. Create Dev / Stage / Prod settings\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\n\n\n\n\n\nIn this directory create the empty files:\n\n\n\n\nsettings.dev.php\n\n\nsettings.stage.php\n\n\nsettings.prod.php\n\n\n\n\n5. Create services.yml\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\n\n\n\n\n\nCopy and rename the \nsites/default/default.services.yml\n to \nsites/default/services.yml\n:\n\n\ncp sites/default/default.services.yml sites/default/services.yml\n\n\n\n\n\n4. Disable Drupal caching\n\n\nOpen \nsettings.local.php\n and make sure the following line is present and uncommented to enable the null cache service, otherwise add it to the end of the file:\n\n\n$settings[\ncontainer_yamls\n][] = DRUPAL_ROOT . \n/sites/development.services.yml\n;\n\n\n\n\n\nUncomment these lines in \nsettings.local.php\n to disable the render cache and disable dynamic page cache:\n\n\n$settings[\ncache\n][\nbins\n][\nrender\n] = \ncache.backend.null\n;\n$settings[\ncache\n][\nbins\n][\ndynamic_page_cache\n] = \ncache.backend.null\n;\n\n\n\n\n\nOpen \ndevelopment.services.yml\n in the sites folder and add the following block to disable the \ntwig\n cache:\n\n\nparameters:\n  ...\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false\n\n\n\n\n\nAfterwards you have to rebuild the \nDrupal\n cache otherwise your website will encounter an unexpected error on page reload:\n\n\ndrush cr\n\n\n\n\n\nNow you should be able to develop in \nDrupal\n without manual cache rebuilds on a regular basis.\n\n\nYour final \ndevelopment.services.yml\n should look as follows (mind the indentation):\n\n\n# Local development services.\n#\n# To activate this feature, follow the instructions at the top of the\n# \nexample.settings.local.php\n file, which sits next to this file.\nparameters:\n  http.response.debug_cacheability_headers: true\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false\nservices:\n  cache.backend.null:\n    class: Drupal\\Core\\Cache\\NullBackendFactory\n\n\n\n\n\n7. Private files\n\n\nTo use private files on \ndrupal\n you must edit your \nsettings.shared.php\n.\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) and is \nsettings.shared.php\n writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\nchmod +w sites/default/settings.shared.php\n\n\n\n\n\nOpen the site \nsettings.shared.php\n. Add and set the following line with a local file system path where private files will be stored:\n\n\n$settings[\nfile_private_path\n] = \n/var/www/yourprojectnamevm/drupal/private\n;\n\n\n\n\n\nThis directory must be absolute, outside of the Drupal installation directory and not accessible over the web.\n\n\nCaches need to be cleared when this value is changed to make the \nprivate://\n stream wrapper available to the system.\n\n\ndrush cr\n\n\n\n\n\nFrom existing configuration\n\n\n1. .gitignore\n\n\nDefault \n.gitignore\n to use on our Drupal 8 projects:\n\n\n# Ignore directories generated by Composer\n/drush/contrib/\n/vendor/\n/web/core/\n/web/modules/contrib/\n/web/themes/contrib/\n/web/profiles/contrib/\n/web/libraries/\n\n# Ignore sensitive information\n/web/sites/*/settings.php\n/web/sites/*/settings.local.php\n\n# Ignore Drupal\ns file directory\n/web/sites/*/files/\n\n# Ignore SimpleTest multi-site environment.\n/web/sites/simpletest\n\n# Ignore files generated by PhpStorm\n/.idea/\n\n\n\n\n\nYou can add more if you need. You must not remove the defaults.\n\n\n2. Enable shared settings\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) and is \nsettings.php\n writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\nchmod +w sites/default/settings.php\n\n\n\n\n\nOpen \nsettings.php\n file in \nsites/default\n and add these lines to the end:\n\n\nif (file_exists($app_root . \n/\n . $site_path . \n/settings.shared.php\n)) {\n  include $app_root . \n/\n . $site_path . \n/settings.shared.php\n;\n}\n\n\n\n\n\nThis will include the shared settings file as part of Drupal's settings file.\n\n\n3. Create and enable local settings\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\n\n\n\n\n\nCopy and rename the \nsites/example.settings.local.php\n to \nsites/default/settings.local.php\n:\n\n\ncp sites/example.settings.local.php sites/default/settings.local.php\n\n\n\n\n\nThis will include the local settings file as part of Drupal's settings file.\n\n\nOpen the \nsettings.local.php\n created and add your local local \nhost\n to on \ntrusted host patterns\n adding these lines to the end:\n\n\n$settings[\ntrusted_host_patterns\n][] = \nyourprojectnamevm.dev\n;\n\n\n\n\n\nIf you have more then one host (e.g. for \nmultisite\n) add all of them.\n\n\nOpen \nsettings.php\n file in \nsites/default\n and add these lines to the end:\n\n\nif (file_exists($app_root . \n/\n . $site_path . \n/settings.local.php\n)) {\n   include $app_root . \n/\n . $site_path . \n/settings.local.php\n;\n}\n\n\n\n\n\n4. Disable Drupal caching\n\n\nOpen \nsettings.local.php\n and make sure the following line is present and uncommented to enable the null cache service, otherwise add it to the end of the file:\n\n\n$settings[\ncontainer_yamls\n][] = DRUPAL_ROOT . \n/sites/development.services.yml\n;\n\n\n\n\n\nUncomment these lines in \nsettings.local.php\n to disable the render cache and disable dynamic page cache:\n\n\n$settings[\ncache\n][\nbins\n][\nrender\n] = \ncache.backend.null\n;\n$settings[\ncache\n][\nbins\n][\ndynamic_page_cache\n] = \ncache.backend.null\n;\n\n\n\n\n\nOpen \ndevelopment.services.yml\n in the sites folder and add the following block to disable the \ntwig\n cache:\n\n\nparameters:\n  ...\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false\n\n\n\n\n\nAfterwards you have to rebuild the \nDrupal\n cache otherwise your website will encounter an unexpected error on page reload:\n\n\ndrush cr\n\n\n\n\n\nNow you should be able to develop in \nDrupal\n without manual cache rebuilds on a regular basis.\n\n\nYour final \ndevelopment.services.yml\n should look as follows (mind the indentation):\n\n\n# Local development services.\n#\n# To activate this feature, follow the instructions at the top of the\n# \nexample.settings.local.php\n file, which sits next to this file.\nparameters:\n  http.response.debug_cacheability_headers: true\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false\nservices:\n  cache.backend.null:\n    class: Drupal\\Core\\Cache\\NullBackendFactory\n\n\n\n\n\n5. Private files\n\n\nTo use private files on \ndrupal\n you must edit your \nsettings.shared.php\n.\n\n\nYou have to make the site settings directory (e.g. \ndefault\n) and is \nsettings.shared.php\n writable to do this. Drupal will restore permissions in a later moment:\n\n\nchmod +w sites/default\nchmod +w sites/default/settings.shared.php\n\n\n\n\n\nOpen the site \nsettings.shared.php\n. Add and set the following line with a local file system path where private files will be stored:\n\n\n$settings[\nfile_private_path\n] = \n/var/www/yourprojectnamevm/drupal/private\n;\n\n\n\n\n\nThis directory must be absolute, outside of the Drupal installation directory and not accessible over the web.\n\n\nCaches need to be cleared when this value is changed to make the \nprivate://\n stream wrapper available to the system.\n\n\ndrush cr", 
            "title": "Basic Configuration"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#basic-configuration", 
            "text": "", 
            "title": "Basic Configuration"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#from-scratch", 
            "text": "", 
            "title": "From scratch"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#1-gitignore", 
            "text": "Default  .gitignore  to use on our Drupal 8 projects:  # Ignore directories generated by Composer\n/drush/contrib/\n/vendor/\n/web/core/\n/web/modules/contrib/\n/web/themes/contrib/\n/web/profiles/contrib/\n/web/libraries/\n\n# Ignore sensitive information\n/web/sites/*/settings.php\n/web/sites/*/settings.local.php\n\n# Ignore Drupal s file directory\n/web/sites/*/files/\n\n# Ignore SimpleTest multi-site environment.\n/web/sites/simpletest\n\n# Ignore files generated by PhpStorm\n/.idea/  You can add more if you need. You must not remove the defaults.", 
            "title": "1. .gitignore"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#2-create-and-enable-shared-settings", 
            "text": "You have to make the site settings directory (e.g.  default ) and is  settings.php  writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default\nchmod +w sites/default/settings.php  Open  settings.php  file in  sites/default  and add these lines to the end:  if (file_exists($app_root .  /  . $site_path .  /settings.shared.php )) {\n  include $app_root .  /  . $site_path .  /settings.shared.php ;\n}  This will include the shared settings file as part of Drupal's settings file.  In  sites/default  create the file  settings.shared.php  with this code:  ?php\n\n/**\n * Trusted host configuration.\n *\n * Drupal core can use the Symfony trusted host mechanism to prevent HTTP Host\n * header spoofing.\n *\n * To enable the trusted host mechanism, you enable your allowable hosts\n * in $settings[ trusted_host_patterns ]. This should be an array of regular\n * expression patterns, without delimiters, representing the hosts you would\n * like to allow.\n *\n * For example:\n * @code\n * $settings[ trusted_host_patterns ] = array(\n *    ^www\\.example\\.com$ ,\n * );\n * @endcode\n * will allow the site to only run from www.example.com.\n *\n * If you are running multisite, or if you are running your site from\n * different domain names (eg, you don t redirect http://www.example.com to\n * http://example.com), you should specify all of the host patterns that are\n * allowed by your site.\n *\n * For example:\n * @code\n * $settings[ trusted_host_patterns ] = array(\n *    ^example\\.com$ ,\n *    ^.+\\.example\\.com$ ,\n *    ^example\\.org$ ,\n *    ^.+\\.example\\.org$ ,\n * );\n * @endcode\n * will allow the site to run off of all variants of example.com and\n * example.org, with all subdomains included.\n */\n$settings[ trusted_host_patterns ] = array(\n   ^yourprojectnamevm\\.dev$ ,\n);  Make sure to edit the setting with your host.", 
            "title": "2. Create and enable shared settings"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#3-create-and-enable-local-settings", 
            "text": "You have to make the site settings directory (e.g.  default ) writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default  Copy and rename the  sites/example.settings.local.php  to  sites/default/settings.local.php :  cp sites/example.settings.local.php sites/default/settings.local.php  This will include the local settings file as part of Drupal's settings file.  Open the  settings.local.php  created and add your local local  host  to on  trusted host patterns  adding these lines to the end:  $settings[ trusted_host_patterns ][] =  yourprojectnamevm.dev ;  If you have more then one host (e.g. for  multisite ) add all of them.  Open  settings.php  file in  sites/default  and add these lines to the end:  if (file_exists($app_root .  /  . $site_path .  /settings.local.php )) {\n   include $app_root .  /  . $site_path .  /settings.local.php ;\n}", 
            "title": "3. Create and enable local settings"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#4-create-dev-stage-prod-settings", 
            "text": "You have to make the site settings directory (e.g.  default ) writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default  In this directory create the empty files:   settings.dev.php  settings.stage.php  settings.prod.php", 
            "title": "4. Create Dev / Stage / Prod settings"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#5-create-servicesyml", 
            "text": "You have to make the site settings directory (e.g.  default ) writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default  Copy and rename the  sites/default/default.services.yml  to  sites/default/services.yml :  cp sites/default/default.services.yml sites/default/services.yml", 
            "title": "5. Create services.yml"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#4-disable-drupal-caching", 
            "text": "Open  settings.local.php  and make sure the following line is present and uncommented to enable the null cache service, otherwise add it to the end of the file:  $settings[ container_yamls ][] = DRUPAL_ROOT .  /sites/development.services.yml ;  Uncomment these lines in  settings.local.php  to disable the render cache and disable dynamic page cache:  $settings[ cache ][ bins ][ render ] =  cache.backend.null ;\n$settings[ cache ][ bins ][ dynamic_page_cache ] =  cache.backend.null ;  Open  development.services.yml  in the sites folder and add the following block to disable the  twig  cache:  parameters:\n  ...\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false  Afterwards you have to rebuild the  Drupal  cache otherwise your website will encounter an unexpected error on page reload:  drush cr  Now you should be able to develop in  Drupal  without manual cache rebuilds on a regular basis.  Your final  development.services.yml  should look as follows (mind the indentation):  # Local development services.\n#\n# To activate this feature, follow the instructions at the top of the\n#  example.settings.local.php  file, which sits next to this file.\nparameters:\n  http.response.debug_cacheability_headers: true\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false\nservices:\n  cache.backend.null:\n    class: Drupal\\Core\\Cache\\NullBackendFactory", 
            "title": "4. Disable Drupal caching"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#7-private-files", 
            "text": "To use private files on  drupal  you must edit your  settings.shared.php .  You have to make the site settings directory (e.g.  default ) and is  settings.shared.php  writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default\nchmod +w sites/default/settings.shared.php  Open the site  settings.shared.php . Add and set the following line with a local file system path where private files will be stored:  $settings[ file_private_path ] =  /var/www/yourprojectnamevm/drupal/private ;  This directory must be absolute, outside of the Drupal installation directory and not accessible over the web.  Caches need to be cleared when this value is changed to make the  private://  stream wrapper available to the system.  drush cr", 
            "title": "7. Private files"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#from-existing-configuration", 
            "text": "", 
            "title": "From existing configuration"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#1-gitignore_1", 
            "text": "Default  .gitignore  to use on our Drupal 8 projects:  # Ignore directories generated by Composer\n/drush/contrib/\n/vendor/\n/web/core/\n/web/modules/contrib/\n/web/themes/contrib/\n/web/profiles/contrib/\n/web/libraries/\n\n# Ignore sensitive information\n/web/sites/*/settings.php\n/web/sites/*/settings.local.php\n\n# Ignore Drupal s file directory\n/web/sites/*/files/\n\n# Ignore SimpleTest multi-site environment.\n/web/sites/simpletest\n\n# Ignore files generated by PhpStorm\n/.idea/  You can add more if you need. You must not remove the defaults.", 
            "title": "1. .gitignore"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#2-enable-shared-settings", 
            "text": "You have to make the site settings directory (e.g.  default ) and is  settings.php  writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default\nchmod +w sites/default/settings.php  Open  settings.php  file in  sites/default  and add these lines to the end:  if (file_exists($app_root .  /  . $site_path .  /settings.shared.php )) {\n  include $app_root .  /  . $site_path .  /settings.shared.php ;\n}  This will include the shared settings file as part of Drupal's settings file.", 
            "title": "2. Enable shared settings"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#3-create-and-enable-local-settings_1", 
            "text": "You have to make the site settings directory (e.g.  default ) writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default  Copy and rename the  sites/example.settings.local.php  to  sites/default/settings.local.php :  cp sites/example.settings.local.php sites/default/settings.local.php  This will include the local settings file as part of Drupal's settings file.  Open the  settings.local.php  created and add your local local  host  to on  trusted host patterns  adding these lines to the end:  $settings[ trusted_host_patterns ][] =  yourprojectnamevm.dev ;  If you have more then one host (e.g. for  multisite ) add all of them.  Open  settings.php  file in  sites/default  and add these lines to the end:  if (file_exists($app_root .  /  . $site_path .  /settings.local.php )) {\n   include $app_root .  /  . $site_path .  /settings.local.php ;\n}", 
            "title": "3. Create and enable local settings"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#4-disable-drupal-caching_1", 
            "text": "Open  settings.local.php  and make sure the following line is present and uncommented to enable the null cache service, otherwise add it to the end of the file:  $settings[ container_yamls ][] = DRUPAL_ROOT .  /sites/development.services.yml ;  Uncomment these lines in  settings.local.php  to disable the render cache and disable dynamic page cache:  $settings[ cache ][ bins ][ render ] =  cache.backend.null ;\n$settings[ cache ][ bins ][ dynamic_page_cache ] =  cache.backend.null ;  Open  development.services.yml  in the sites folder and add the following block to disable the  twig  cache:  parameters:\n  ...\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false  Afterwards you have to rebuild the  Drupal  cache otherwise your website will encounter an unexpected error on page reload:  drush cr  Now you should be able to develop in  Drupal  without manual cache rebuilds on a regular basis.  Your final  development.services.yml  should look as follows (mind the indentation):  # Local development services.\n#\n# To activate this feature, follow the instructions at the top of the\n#  example.settings.local.php  file, which sits next to this file.\nparameters:\n  http.response.debug_cacheability_headers: true\n  twig.config:\n    debug: true\n    auto_reload: true\n    cache: false\nservices:\n  cache.backend.null:\n    class: Drupal\\Core\\Cache\\NullBackendFactory", 
            "title": "4. Disable Drupal caching"
        }, 
        {
            "location": "/drupal/drupal_basic_configuration/#5-private-files", 
            "text": "To use private files on  drupal  you must edit your  settings.shared.php .  You have to make the site settings directory (e.g.  default ) and is  settings.shared.php  writable to do this. Drupal will restore permissions in a later moment:  chmod +w sites/default\nchmod +w sites/default/settings.shared.php  Open the site  settings.shared.php . Add and set the following line with a local file system path where private files will be stored:  $settings[ file_private_path ] =  /var/www/yourprojectnamevm/drupal/private ;  This directory must be absolute, outside of the Drupal installation directory and not accessible over the web.  Caches need to be cleared when this value is changed to make the  private://  stream wrapper available to the system.  drush cr", 
            "title": "5. Private files"
        }, 
        {
            "location": "/drupal/drupal_composer/", 
            "text": "Using Composer\n\n\nAdd Contrib Modules\n\n\nDefault method to add \nDrupal\n module through is:\n\n\ncomposer require drupal/\nmodulename\n\n\n\n\n\n\nYou can specify a version from the command line with:\n\n\ncomposer require drupal/\nmodulename\n:\nversion\n\n\n\n\n\n\n\n\nTip\n\n\nTo avoid problems on different terminals/shells, surround the version using double quotes. Also, to make sure you will require versions of your dependencies that will guarantee not to break other things, try to use the best combination to constrain versions. Check an example:\n\n\ncomposer require \ndrupal/ctools:^3.0@alpha\n\n\n\n\n\n\n\n\nIf you wish to select the \nmodule\n version:\n\n\ncomposer require drupal/\nmodulename\n --prefer-dist\n\n\n\n\n\nAdd other dependencies\n\n\ncomposer require \nvendor\n/\nmodulename\n\n\n\n\n\n\nDevelopment dependencies\n\n\nThere are often components of your project that you need when doing development work, but you don't need on production. For example, Devel, XHProf, and Stage File Proxy are helpful to have on your local environment, but if you don't need them in production, you should exclude them from your codebase entirely (not only for minor performance reasons and keeping your build artifacts smaller\u2014non-installed modules can still be a security risk if they have vulnerabilities).\n\n\nComposer lets you track 'dev dependencies' (using require-dev instead of require) that are installed by default, but can be excluded when building the final deployable codebase (by passing --no-dev when running composer install or composer update).\n\n\nTo add these components only for dev you should run:\n\n\ncomposer require --dev \nvendor\n/\nmodulename\n\n\n\n\n\n\nIn case you are adding a drupal contrib module, remember to exclude it's drupal configuration from the default sync folder through \nConfiguration Split\n\n\nManaging dependencies for a custom project (module, theme, profile, etc.)\n\n\nManaging dependencies for a custom project\n\n\nYou can use Composer to manage dependencies for your custom modules.\n\n\n1. Add composer.json to your project\n\n\nAdd a \ncomposer.json\n file to your custom project where you can define your custom library dependencies.\n\n\n2. Merging in additional composer.json files\n\n\nTo do this, your Drupal site's composer.json (located in the repo root) must have a way to read your custom project's composer.json file. Since your custom project is not hosted on Packagist or Drupal.org, you must use the wikimedia/composer-merge-plugin` package to accomplish this.\n\n\nRequire the \nwikimedia/composer-merge-pluginin\n your Drupal site's \ncomposer.json\n (located in the repo root).\n\n\ncomposer require wikimedia/composer-merge-plugin\n\n\n\n\n\nReference your additional composer.json files in the extra section of your root composer.json file.\n\n\nextra\n: {\n  \nmerge-plugin\n: {\n    \nrequire\n: [\n      \ndocroot/modules/custom/example/composer.json\n\n    ]\n  }\n}\n\n\n\n\n\nUpdate your Drupal site dependencies:\n\n\ncomposer update\n\n\n\n\n\nUpdate Drupal core\n\n\ncomposer update drupal/core --with-dependencies\n\n\n\n\n\nUpdate all Drupal dependencies\n\n\ncomposer update\n\n\n\n\n\nDefine the directories to which Drupal projects should be downloaded\n\n\nBy default, Composer will download all packages to the \nvendor\n directory. Clearly, this doesn't jibe with Drupal modules, themes, profiles, and libraries. To ensure that packages are downloaded to the correct path, Drupal uses the composer/installers package and ships with configuration for the directories for your Drupal site. The drupal/drupal template does not ship with drupal-libary configuration, but you can just add it to your composer.json:\n\n\nextra\n: {\n    \ninstaller-paths\n: {\n        \ncore\n: [\ntype:drupal-core\n],\n        \nlibraries/{$name}\n: [\ntype:drupal-library\n],\n        \nmodules/contrib/{$name}\n: [\ntype:drupal-module\n],\n        \nprofiles/contrib/{$name}\n: [\ntype:drupal-profile\n],\n        \nthemes/contrib/{$name}\n: [\ntype:drupal-theme\n],\n        \ndrush/{$name}\n: [\ntype:drupal-drush\n],\n        \nmodules/custom/{$name}\n: [\ntype:drupal-custom-module\n],\n        \nthemes/custom/{$name}\n: [\ntype:drupal-custom-theme\n]\n    }\n}\n\n\n\n\n\nDefine the directories for arbitrary packages that do not have a \"drupal-*\" type\n\n\nIf you would like to place an arbitrary Composer package in a custom directory, you may use the Composer Installers Extender.\n\n\ncomposer require composer/installers\n\n\n\n\n\nFor instance, if you'd like to place the Dropzone package (which does not have a type of drupal-library) in the same directory as other Drupal libraries, you would first composer require oomphinc/composer-installers-extender, then add the following configuration to your composer.json file:\n\n\nextra\n: {\n    \ninstaller-paths\n: {\n        \nlibraries/{$name}\n: [\n            \ntype:drupal-library\n,\n            \nenyo/dropzone\n\n        ],\n    }\n}\n\n\n\n\n\nFinally, you would composer require enyo/dropzone.\n\n\nDefine a 3rd party library as a custom composer package\n\n\nIf you would like to place an arbitrary library, that doesn't have a composer repository, as a custom composer package, you may use the \nComposer Installers Extender\n:\n\n\ncomposer require composer/installers\ncomposer require oomphinc/composer-installers-extender\n\n\n\n\n\nDefine your custom repositories:\n\n\nrepositories\n: [\n    ...\n    {\n        \ntype\n: \npackage\n,\n        \npackage\n: {\n            \nname\n: \nenyo/dropzone\n,\n            \nversion\n: \n4.3\n,\n            \ntype\n: \ndrupal-library\n,\n            \nsource\n: {\n                \nurl\n: \nhttps://github.com/enyo/dropzone.git\n,\n                \ntype\n: \ngit\n,\n                \nreference\n: \nmaster\n                },\n            \ndist\n: {\n                \nurl\n: \nhttps://github.com/enyo/dropzone/archive/v4.3.0.zip\n,\n                \ntype\n: \nzip\n\n            },\n            \nrequire\n: {\n                \ncomposer/installers\n: \n~1.0\n\n            }\n        }\n    }\n]\n\n\n\n\n\nMake sure to have set the libraries installer path:\n\n\ninstaller-paths\n: {\n    ...\n    \nweb/libraries/{$name}\n: [\n                \ntype:drupal-library\n\n            ],\n    ...\n}\n\n\n\n\n\nNow you can install your custom package:\n\n\ncomposer require enyo/dropzone\n\n\n\n\n\nManage project assets from NPM or Bower\n\n\nIf you would like to manage your project \nassets\n (css, js, etc.) in your \ncomposer.json\n without installing \nNPM\n or \nBower\n, you may user the \ncomposer\n repository \nAsset Packagist\n.\n\n\nAdd the repository to \ncomposer.json\n:\n\n\nrepositories\n: [\n    ...\n    {\n        \ntype\n: \ncomposer\n,\n        \nurl\n: \nhttps://asset-packagist.org\n\n    }\n],\n\n\n\n\n\nThis repository works by transposing package information from \nNPM\n or \nBower\n to a compatible version for \nComposer\n. This allows you to manage asset dependencies in a \nPHP\n based project very easily.\n\n\nTo install those packages in the \ndrupal\n libraries directory, it's needed the \ndrupal-library-mapping\n package:\n\n\ncomposer require bmcclure/drupal-library-mapping\n\n\n\n\n\nNow you can define the custom directory for the assets installation, according to the standard drupal libraries directory:\n\n\nextra\n: {\n    \ninstaller-types\n: [\nlibrary\n, \ndrupal-library\n, \nbower-asset\n, \nnpm-asset\n],\n    \ninstaller-paths\n: {\n        \nweb/core\n: [\ntype:drupal-core\n],\n        \nweb/libraries/{$name}\n: [\n            \ntype:drupal-library\n,\n            \ntype:bower-asset\n,\n            \ntype:npm-asset\n\n        ],\n        ...\n    }\n}\n\n\n\n\n\nAdding a dependency on an asset, you must add the asset to the property require of the \ncomposer.json\n of your project.\n\n\nIt must be prefixed with \n{asset-type}-asset/\n:\n\n\ncomposer require npm-asset/bootstrap\n...\ncomposer require bower-asset/bootstrap\n\n\n\n\n\nTo avoid the download of dependencies already present in \ndrupal\n core:\n\n\nreplace\n: {\n    \nbower-asset/jquery\n: \n*\n,\n    \nbower-asset/jqueryui\n: \n*\n,\n    \nbower-asset/jquery-ui\n: \n*\n,\n    \nbower-asset/backbone\n: \n*\n,\n    \nbower-asset/underscore\n: \n*\n,\n    \nnpm-asset/jquery\n: \n*\n,\n    \nnpm-asset/jqueryui\n: \n*\n,\n    \nnpm-asset/jquery-ui\n: \n*\n,\n    \nnpm-asset/backbone\n: \n*\n,\n    \nnpm-asset/underscore\n: \n*\n\n},\n\n\n\n\n\nApply patches to downloaded modules\n\n\nIf you need to apply patches (depending on the project being modified, a pull request is often a better solution), you can do so with the composer-patches plugin.\n\n\nTo add a patch to drupal module foobar insert the patches section in the extra section of composer.json:\n\n\nextra\n: {\n    \npatches\n: {\n        \ndrupal/foobar\n: {\n            \nPatch description\n: \nURL to patch\n\n        }\n    }\n}", 
            "title": "Using Composer"
        }, 
        {
            "location": "/drupal/drupal_composer/#using-composer", 
            "text": "", 
            "title": "Using Composer"
        }, 
        {
            "location": "/drupal/drupal_composer/#add-contrib-modules", 
            "text": "Default method to add  Drupal  module through is:  composer require drupal/ modulename   You can specify a version from the command line with:  composer require drupal/ modulename : version    Tip  To avoid problems on different terminals/shells, surround the version using double quotes. Also, to make sure you will require versions of your dependencies that will guarantee not to break other things, try to use the best combination to constrain versions. Check an example:  composer require  drupal/ctools:^3.0@alpha    If you wish to select the  module  version:  composer require drupal/ modulename  --prefer-dist", 
            "title": "Add Contrib Modules"
        }, 
        {
            "location": "/drupal/drupal_composer/#add-other-dependencies", 
            "text": "composer require  vendor / modulename", 
            "title": "Add other dependencies"
        }, 
        {
            "location": "/drupal/drupal_composer/#development-dependencies", 
            "text": "There are often components of your project that you need when doing development work, but you don't need on production. For example, Devel, XHProf, and Stage File Proxy are helpful to have on your local environment, but if you don't need them in production, you should exclude them from your codebase entirely (not only for minor performance reasons and keeping your build artifacts smaller\u2014non-installed modules can still be a security risk if they have vulnerabilities).  Composer lets you track 'dev dependencies' (using require-dev instead of require) that are installed by default, but can be excluded when building the final deployable codebase (by passing --no-dev when running composer install or composer update).  To add these components only for dev you should run:  composer require --dev  vendor / modulename   In case you are adding a drupal contrib module, remember to exclude it's drupal configuration from the default sync folder through  Configuration Split", 
            "title": "Development dependencies"
        }, 
        {
            "location": "/drupal/drupal_composer/#managing-dependencies-for-a-custom-project-module-theme-profile-etc", 
            "text": "Managing dependencies for a custom project  You can use Composer to manage dependencies for your custom modules.", 
            "title": "Managing dependencies for a custom project (module, theme, profile, etc.)"
        }, 
        {
            "location": "/drupal/drupal_composer/#1-add-composerjson-to-your-project", 
            "text": "Add a  composer.json  file to your custom project where you can define your custom library dependencies.", 
            "title": "1. Add composer.json to your project"
        }, 
        {
            "location": "/drupal/drupal_composer/#2-merging-in-additional-composerjson-files", 
            "text": "To do this, your Drupal site's composer.json (located in the repo root) must have a way to read your custom project's composer.json file. Since your custom project is not hosted on Packagist or Drupal.org, you must use the wikimedia/composer-merge-plugin` package to accomplish this.  Require the  wikimedia/composer-merge-pluginin  your Drupal site's  composer.json  (located in the repo root).  composer require wikimedia/composer-merge-plugin  Reference your additional composer.json files in the extra section of your root composer.json file.  extra : {\n   merge-plugin : {\n     require : [\n       docroot/modules/custom/example/composer.json \n    ]\n  }\n}  Update your Drupal site dependencies:  composer update", 
            "title": "2. Merging in additional composer.json files"
        }, 
        {
            "location": "/drupal/drupal_composer/#update-drupal-core", 
            "text": "composer update drupal/core --with-dependencies", 
            "title": "Update Drupal core"
        }, 
        {
            "location": "/drupal/drupal_composer/#update-all-drupal-dependencies", 
            "text": "composer update", 
            "title": "Update all Drupal dependencies"
        }, 
        {
            "location": "/drupal/drupal_composer/#define-the-directories-to-which-drupal-projects-should-be-downloaded", 
            "text": "By default, Composer will download all packages to the  vendor  directory. Clearly, this doesn't jibe with Drupal modules, themes, profiles, and libraries. To ensure that packages are downloaded to the correct path, Drupal uses the composer/installers package and ships with configuration for the directories for your Drupal site. The drupal/drupal template does not ship with drupal-libary configuration, but you can just add it to your composer.json:  extra : {\n     installer-paths : {\n         core : [ type:drupal-core ],\n         libraries/{$name} : [ type:drupal-library ],\n         modules/contrib/{$name} : [ type:drupal-module ],\n         profiles/contrib/{$name} : [ type:drupal-profile ],\n         themes/contrib/{$name} : [ type:drupal-theme ],\n         drush/{$name} : [ type:drupal-drush ],\n         modules/custom/{$name} : [ type:drupal-custom-module ],\n         themes/custom/{$name} : [ type:drupal-custom-theme ]\n    }\n}", 
            "title": "Define the directories to which Drupal projects should be downloaded"
        }, 
        {
            "location": "/drupal/drupal_composer/#define-the-directories-for-arbitrary-packages-that-do-not-have-a-drupal-type", 
            "text": "If you would like to place an arbitrary Composer package in a custom directory, you may use the Composer Installers Extender.  composer require composer/installers  For instance, if you'd like to place the Dropzone package (which does not have a type of drupal-library) in the same directory as other Drupal libraries, you would first composer require oomphinc/composer-installers-extender, then add the following configuration to your composer.json file:  extra : {\n     installer-paths : {\n         libraries/{$name} : [\n             type:drupal-library ,\n             enyo/dropzone \n        ],\n    }\n}  Finally, you would composer require enyo/dropzone.", 
            "title": "Define the directories for arbitrary packages that do not have a \"drupal-*\" type"
        }, 
        {
            "location": "/drupal/drupal_composer/#define-a-3rd-party-library-as-a-custom-composer-package", 
            "text": "If you would like to place an arbitrary library, that doesn't have a composer repository, as a custom composer package, you may use the  Composer Installers Extender :  composer require composer/installers\ncomposer require oomphinc/composer-installers-extender  Define your custom repositories:  repositories : [\n    ...\n    {\n         type :  package ,\n         package : {\n             name :  enyo/dropzone ,\n             version :  4.3 ,\n             type :  drupal-library ,\n             source : {\n                 url :  https://github.com/enyo/dropzone.git ,\n                 type :  git ,\n                 reference :  master                 },\n             dist : {\n                 url :  https://github.com/enyo/dropzone/archive/v4.3.0.zip ,\n                 type :  zip \n            },\n             require : {\n                 composer/installers :  ~1.0 \n            }\n        }\n    }\n]  Make sure to have set the libraries installer path:  installer-paths : {\n    ...\n     web/libraries/{$name} : [\n                 type:drupal-library \n            ],\n    ...\n}  Now you can install your custom package:  composer require enyo/dropzone", 
            "title": "Define a 3rd party library as a custom composer package"
        }, 
        {
            "location": "/drupal/drupal_composer/#manage-project-assets-from-npm-or-bower", 
            "text": "If you would like to manage your project  assets  (css, js, etc.) in your  composer.json  without installing  NPM  or  Bower , you may user the  composer  repository  Asset Packagist .  Add the repository to  composer.json :  repositories : [\n    ...\n    {\n         type :  composer ,\n         url :  https://asset-packagist.org \n    }\n],  This repository works by transposing package information from  NPM  or  Bower  to a compatible version for  Composer . This allows you to manage asset dependencies in a  PHP  based project very easily.  To install those packages in the  drupal  libraries directory, it's needed the  drupal-library-mapping  package:  composer require bmcclure/drupal-library-mapping  Now you can define the custom directory for the assets installation, according to the standard drupal libraries directory:  extra : {\n     installer-types : [ library ,  drupal-library ,  bower-asset ,  npm-asset ],\n     installer-paths : {\n         web/core : [ type:drupal-core ],\n         web/libraries/{$name} : [\n             type:drupal-library ,\n             type:bower-asset ,\n             type:npm-asset \n        ],\n        ...\n    }\n}  Adding a dependency on an asset, you must add the asset to the property require of the  composer.json  of your project.  It must be prefixed with  {asset-type}-asset/ :  composer require npm-asset/bootstrap\n...\ncomposer require bower-asset/bootstrap  To avoid the download of dependencies already present in  drupal  core:  replace : {\n     bower-asset/jquery :  * ,\n     bower-asset/jqueryui :  * ,\n     bower-asset/jquery-ui :  * ,\n     bower-asset/backbone :  * ,\n     bower-asset/underscore :  * ,\n     npm-asset/jquery :  * ,\n     npm-asset/jqueryui :  * ,\n     npm-asset/jquery-ui :  * ,\n     npm-asset/backbone :  * ,\n     npm-asset/underscore :  * \n},", 
            "title": "Manage project assets from NPM or Bower"
        }, 
        {
            "location": "/drupal/drupal_composer/#apply-patches-to-downloaded-modules", 
            "text": "If you need to apply patches (depending on the project being modified, a pull request is often a better solution), you can do so with the composer-patches plugin.  To add a patch to drupal module foobar insert the patches section in the extra section of composer.json:  extra : {\n     patches : {\n         drupal/foobar : {\n             Patch description :  URL to patch \n        }\n    }\n}", 
            "title": "Apply patches to downloaded modules"
        }, 
        {
            "location": "/drupal/drupal_configuration_management/", 
            "text": "Configuration Management\n\n\nIntroduction to Drupal CMI\n\n\nConfiguration Management\n\n\nFirst of all, you need to understand, how the configuration management in Drupal 8 works. CMI allows you to export all configurations and its dependencies from the database into yml text files. To make sure, you never end up in an inconsistent state, CMI always exports everything. By default, you cannot exclude certain configurations.\n\n\nTo export the configuration you must set the export directory in your Drupal settings. See \nConfiguration directory\n.\n\n\nThan you can export with:\n\n\ndrush config-export\n\n\n\n\n\nIf you change some configuration on the database, these configurations will be reverted in the next deployment when you use:\n\n\ndrush config-import\n\n\n\n\n\nThis is helpful and will make sure, you have the same configuration on all your systems.\n\n\nDifferent configurations on Dev / Stage / Prod environments\n\n\nYou want to have different configurations on your environments. For example, we have installed a \u201cdevel\u201d module only on our local environment but we want to have it disabled on the live environment.\n\n\nThis can be achieved by using the \nConfiguration Split\n module.\n\n\nConfiguration split exposes a configuration entity which controls what you want to split off. Currently you can\n\n\n\n\nblacklist modules\n: any configuration that this module owns will automatically be blacklisted too.\n\n\nblacklist configuration\n: settings or configuration entities. These will be removed from the active sync directory.\n\n\ngraylist configuration\n: settings or configuration entities. These will not be removed if they are in the active sync directory, but also not exported if they are not there yet.\n\n\n\n\nAs default, we have \nDev\n / \nStage\n / \nProd\n config environments already set up and configured on our drupal projects. Those are set to inactive. You must enable the \nDev\n environment on your local environment to import / export is config. Open the \nsettings.local.php\n and add this line:\n\n\n$config[\nconfig_split.config_split.dev\n][\nstatus\n] = TRUE;\n\n\n\n\n\nIf those config environments are not yet set, you can create them when needed but make sure to name them with the following \nmachine name\n:\n\n\n\n\ndev\n\n\nstage\n\n\nprod\n\n\n\n\nas those are the defaults for our projects.\n\n\nNow you can use normal \ndrush\n import /export commands and \nConfiguration Split\n we'll do the magic for you:\n\n\n# To export configuration\ndrush cex -y\n# To import configuration\ndrush cim -y\n\n\n\n\n\nOverride Configuration\n\n\nIn development, it's convenient to have different configuration then on the production site (e.g. different error reporting, different API keys, different site email, etc.):\n\n\nThese customizations are not to be exported.\n\n\nThe \n$config\n array allows run-time overriding: configuration is still there, but it gets overridden.\n\n\nThese customizations must be added to:\n\n\n\n\nsettings.local.php\n if they are needed only for your local environment (see \nCreate and enable local settings\n)\n\n\nsettings.dev.php\n if they are needed for all dev environments (already available on the repository)\n\n\n\n\nAs example, to enable verbose error logging on your instance add:\n\n\n$config[\nsystem.logging\n][\nerror_level\n] = \nverbose\n;\n\n\n\n\n\nAfter the override, the \ndrupal\n backend UI still shows the original (non-overridden) settings. This is wanted to prevent you from submitting overriden configuration. So, even after the override, \ndrupal\n exports the original settings.", 
            "title": "Configuration Management (CMI)"
        }, 
        {
            "location": "/drupal/drupal_configuration_management/#configuration-management", 
            "text": "", 
            "title": "Configuration Management"
        }, 
        {
            "location": "/drupal/drupal_configuration_management/#introduction-to-drupal-cmi", 
            "text": "Configuration Management  First of all, you need to understand, how the configuration management in Drupal 8 works. CMI allows you to export all configurations and its dependencies from the database into yml text files. To make sure, you never end up in an inconsistent state, CMI always exports everything. By default, you cannot exclude certain configurations.  To export the configuration you must set the export directory in your Drupal settings. See  Configuration directory .  Than you can export with:  drush config-export  If you change some configuration on the database, these configurations will be reverted in the next deployment when you use:  drush config-import  This is helpful and will make sure, you have the same configuration on all your systems.", 
            "title": "Introduction to Drupal CMI"
        }, 
        {
            "location": "/drupal/drupal_configuration_management/#different-configurations-on-dev-stage-prod-environments", 
            "text": "You want to have different configurations on your environments. For example, we have installed a \u201cdevel\u201d module only on our local environment but we want to have it disabled on the live environment.  This can be achieved by using the  Configuration Split  module.  Configuration split exposes a configuration entity which controls what you want to split off. Currently you can   blacklist modules : any configuration that this module owns will automatically be blacklisted too.  blacklist configuration : settings or configuration entities. These will be removed from the active sync directory.  graylist configuration : settings or configuration entities. These will not be removed if they are in the active sync directory, but also not exported if they are not there yet.   As default, we have  Dev  /  Stage  /  Prod  config environments already set up and configured on our drupal projects. Those are set to inactive. You must enable the  Dev  environment on your local environment to import / export is config. Open the  settings.local.php  and add this line:  $config[ config_split.config_split.dev ][ status ] = TRUE;  If those config environments are not yet set, you can create them when needed but make sure to name them with the following  machine name :   dev  stage  prod   as those are the defaults for our projects.  Now you can use normal  drush  import /export commands and  Configuration Split  we'll do the magic for you:  # To export configuration\ndrush cex -y\n# To import configuration\ndrush cim -y", 
            "title": "Different configurations on Dev / Stage / Prod environments"
        }, 
        {
            "location": "/drupal/drupal_configuration_management/#override-configuration", 
            "text": "In development, it's convenient to have different configuration then on the production site (e.g. different error reporting, different API keys, different site email, etc.):  These customizations are not to be exported.  The  $config  array allows run-time overriding: configuration is still there, but it gets overridden.  These customizations must be added to:   settings.local.php  if they are needed only for your local environment (see  Create and enable local settings )  settings.dev.php  if they are needed for all dev environments (already available on the repository)   As example, to enable verbose error logging on your instance add:  $config[ system.logging ][ error_level ] =  verbose ;  After the override, the  drupal  backend UI still shows the original (non-overridden) settings. This is wanted to prevent you from submitting overriden configuration. So, even after the override,  drupal  exports the original settings.", 
            "title": "Override Configuration"
        }, 
        {
            "location": "/drupal/drupal_deploy_content/", 
            "text": "Deploy Content\n\n\nTo deploy configuration that depends on content such as nodes, blocks, taxonomy terms, etc.\n\n\nDefault Content module\n\n\nDefault Content\n module gives your module and install profile a way to ship default content as well as configuration.\n\n\nDeploy module\n\n\nDeploy\n module is designed to allow users to easily stage and preview content for a Drupal site. Deploy automatically manages dependencies between entities (like node references). It is designed to have a rich API which can be easily extended to be used in a variety of content staging situations.\n\n\nUpdating content\n\n\nIn \ndrupal\n 8 there is a post update hook specifically designed to work with content:\n\n\nfunction hook_post_update_NAME(\n$sandbox) { }\n\n\n\n\n\nNew with proof of concept module \nConfig Import N\n.\n\n\nContent Synchronization module\n\n\nContent Synchronization\n module provides a mechanism to export single content items, or all content items, from an environment, and move them to another, effortlessly.", 
            "title": "Deploy Content"
        }, 
        {
            "location": "/drupal/drupal_deploy_content/#deploy-content", 
            "text": "To deploy configuration that depends on content such as nodes, blocks, taxonomy terms, etc.", 
            "title": "Deploy Content"
        }, 
        {
            "location": "/drupal/drupal_deploy_content/#default-content-module", 
            "text": "Default Content  module gives your module and install profile a way to ship default content as well as configuration.", 
            "title": "Default Content module"
        }, 
        {
            "location": "/drupal/drupal_deploy_content/#deploy-module", 
            "text": "Deploy  module is designed to allow users to easily stage and preview content for a Drupal site. Deploy automatically manages dependencies between entities (like node references). It is designed to have a rich API which can be easily extended to be used in a variety of content staging situations.", 
            "title": "Deploy module"
        }, 
        {
            "location": "/drupal/drupal_deploy_content/#updating-content", 
            "text": "In  drupal  8 there is a post update hook specifically designed to work with content:  function hook_post_update_NAME( $sandbox) { }  New with proof of concept module  Config Import N .", 
            "title": "Updating content"
        }, 
        {
            "location": "/drupal/drupal_deploy_content/#content-synchronization-module", 
            "text": "Content Synchronization  module provides a mechanism to export single content items, or all content items, from an environment, and move them to another, effortlessly.", 
            "title": "Content Synchronization module"
        }, 
        {
            "location": "/drupal/drupal_cors/", 
            "text": "CORS Configuration\n\n\nCross-origin resource sharing\n (\nCORS\n) is a mechanism that allows a web page to make XMLHttpRequests to another domain. Such \ncross-domain\n requests would otherwise be forbidden by web browsers, per the same origin security policy.\n\n\nTo enable `CORS in your Drupal installation three methods are available:\n\n\n\n\nCORS Module\n\n\nCORS services.yml\n\n\nCORS settings.environment.php\n\n\n\n\nCORS Module\n\n\nCORS\n module provides a configuration page to map domains to paths and add the necessary Access-Control-Allow-Origin header.\n\n\nCORS services.yml\n\n\nDrupal\nservices.yml\n(located in\nsites/default) contain the drupal default method to enable and configure CORS.\n\n\nBelow a configuration example:\n\n\n   # Configure Cross-Site HTTP requests (CORS).\n   # Read https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n   # for more information about the topic in general.\n   # Note: By default the configuration is disabled.\n  cors.config:\n    enabled: true\n    # Specify allowed headers, like \nx-allowed-header\n.\n    allowedHeaders: [\nContent-Type,X-Auth-Token,X-Requested-With,Origin,Authorization,Accept,X-CSRF-Token\n]\n    # Specify allowed request methods, specify [\n*\n] to allow all possible ones.\n    allowedMethods: [\nPOST,GET,PUT,DELETE,OPTIONS\n]\n    # Configure requests allowed from specific origins.\n    allowedOrigins: [\nhttp://example.dev\n]\n    # Sets the Access-Control-Expose-Headers header.\n    exposedHeaders: false\n    # Sets the Access-Control-Max-Age header.\n    maxAge: false\n    # Sets the Access-Control-Allow-Credentials header.\n    supportsCredentials: true\n\n\n\n\n\nCORS settings.environment.php\n\n\nFor complex \nCORS\n configuration you can use one of \nsettings.environment.php\n in your Drupal installation (e.g. \nsettings.shared.php\n, \nsettings.local.php\n, \nsettings.dev.php\n, etc.) to add your \nCORS\n configuration.\n\n\nBelow a configuration example:\n\n\nheader(\nAccess-Control-Allow-Origin: http://example.dev\n);\nheader(\nAccess-Control-Allow-Credentials: true\n);\nheader(\nAccess-Control-Allow-Methods: POST,GET,PUT,DELETE,OPTIONS\n);\nheader(\nAccess-Control-Allow-Headers: Content-Type,X-Auth-Token,X-Requested-With,Origin,Authorization,Accept,X-CSRF-Token\n);\n\n\n\n\n\nCORS multi-origin\n\n\nFor multi-origin CORS configuration the best way is to configure it through \nCORS settings.environment.php\n.\n\n\nBelow a configuration example:\n\n\n$allowed_origin = array(\n  \nhttp://example.one.dev\n,\n  \nhttp://example.two.dev\n,\n);\n\nif (in_array($_SERVER[\nHTTP_ORIGIN\n], $allowed_origin)) {\n  header(\nAccess-Control-Allow-Origin: \n . $_SERVER[\nHTTP_ORIGIN\n]);\n  header(\nAccess-Control-Allow-Credentials: true\n);\n  header(\nAccess-Control-Allow-Methods: POST,GET,PUT,DELETE,OPTIONS\n);\n  header(\nAccess-Control-Allow-Headers: Content-Type,X-Auth-Token,X-Requested-With,Origin,Authorization,Accept,X-CSRF-Token\n);\n}", 
            "title": "CORS Configuration"
        }, 
        {
            "location": "/drupal/drupal_cors/#cors-configuration", 
            "text": "Cross-origin resource sharing  ( CORS ) is a mechanism that allows a web page to make XMLHttpRequests to another domain. Such  cross-domain  requests would otherwise be forbidden by web browsers, per the same origin security policy.  To enable `CORS in your Drupal installation three methods are available:   CORS Module  CORS services.yml  CORS settings.environment.php", 
            "title": "CORS Configuration"
        }, 
        {
            "location": "/drupal/drupal_cors/#cors-module", 
            "text": "CORS  module provides a configuration page to map domains to paths and add the necessary Access-Control-Allow-Origin header.", 
            "title": "CORS Module"
        }, 
        {
            "location": "/drupal/drupal_cors/#cors-servicesyml", 
            "text": "Drupal services.yml (located in sites/default) contain the drupal default method to enable and configure CORS.  Below a configuration example:     # Configure Cross-Site HTTP requests (CORS).\n   # Read https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n   # for more information about the topic in general.\n   # Note: By default the configuration is disabled.\n  cors.config:\n    enabled: true\n    # Specify allowed headers, like  x-allowed-header .\n    allowedHeaders: [ Content-Type,X-Auth-Token,X-Requested-With,Origin,Authorization,Accept,X-CSRF-Token ]\n    # Specify allowed request methods, specify [ * ] to allow all possible ones.\n    allowedMethods: [ POST,GET,PUT,DELETE,OPTIONS ]\n    # Configure requests allowed from specific origins.\n    allowedOrigins: [ http://example.dev ]\n    # Sets the Access-Control-Expose-Headers header.\n    exposedHeaders: false\n    # Sets the Access-Control-Max-Age header.\n    maxAge: false\n    # Sets the Access-Control-Allow-Credentials header.\n    supportsCredentials: true", 
            "title": "CORS services.yml"
        }, 
        {
            "location": "/drupal/drupal_cors/#cors-settingsenvironmentphp", 
            "text": "For complex  CORS  configuration you can use one of  settings.environment.php  in your Drupal installation (e.g.  settings.shared.php ,  settings.local.php ,  settings.dev.php , etc.) to add your  CORS  configuration.  Below a configuration example:  header( Access-Control-Allow-Origin: http://example.dev );\nheader( Access-Control-Allow-Credentials: true );\nheader( Access-Control-Allow-Methods: POST,GET,PUT,DELETE,OPTIONS );\nheader( Access-Control-Allow-Headers: Content-Type,X-Auth-Token,X-Requested-With,Origin,Authorization,Accept,X-CSRF-Token );", 
            "title": "CORS settings.environment.php"
        }, 
        {
            "location": "/drupal/drupal_cors/#cors-multi-origin", 
            "text": "For multi-origin CORS configuration the best way is to configure it through  CORS settings.environment.php .  Below a configuration example:  $allowed_origin = array(\n   http://example.one.dev ,\n   http://example.two.dev ,\n);\n\nif (in_array($_SERVER[ HTTP_ORIGIN ], $allowed_origin)) {\n  header( Access-Control-Allow-Origin:   . $_SERVER[ HTTP_ORIGIN ]);\n  header( Access-Control-Allow-Credentials: true );\n  header( Access-Control-Allow-Methods: POST,GET,PUT,DELETE,OPTIONS );\n  header( Access-Control-Allow-Headers: Content-Type,X-Auth-Token,X-Requested-With,Origin,Authorization,Accept,X-CSRF-Token );\n}", 
            "title": "CORS multi-origin"
        }, 
        {
            "location": "/drupal/drupal_multisite/", 
            "text": "Multisite\n\n\nIf you are running more than one Drupal site, you can simplify the management and can upgrade your sites by using the multi-site feature. Multi-site allows you to share a single Drupal installation (including core code, contributed modules, and themes) among several sites.\n\n\nThis is particularly useful for managing the code since each upgrade only needs to be done once. Each site will have its own database and its own configuration settings, so each site will have its own content, settings, enabled modules, and enabled theme. However, the sites are sharing a code base and web document root, so there may be security concerns with multiple administrators. (See \"\nSecurity Concerns\n\" for more information).\n\n\nCreate a Multisite\n\n\nYou can create a new installation either from scratch or as a sub-site of an existing Drupal installation. The only thing you need is a new empty database.\n\n\nFor a detailed list of steps, you can take a look at \nDrupal.org Docs about Multi-site - Sharing the same code base\n.\n\n\nUsing drush, you can run this simple command:\n\n\ndrush site-install --db-url=mysql://db_user:db_password@localhost:port/db_name --sites-subdir=sample.subsite.com --account-name=admin --account-pass=admin -y\n\n\n\n\n\nTo install it with a different language than default (english) you can use the \nlocale\n parameter. As example, to install it with \nitalian\n language you can run:\n\n\ndrush site-install --db-url=mysql://db_user:db_password@localhost:port/db_name --sites-subdir=sample.subsite.com --account-name=admin --account-pass=admin  -locale=it -y\n\n\n\n\n\nMultisite with Shared Configuration\n\n\nWe can use \nConfiguration Management\n (CMI) with \nConfiguration Split\n to share the configuration between sites (see \nConfiguration Management\n).\n\n\nInstall a subsite from an existing configuration\n\n\nWith the help of \nConfiguration Installer\n we can install a new subsite from an existing configuration.\n\n\nAdd the \nConfig Installer\n profile:\n\n\ndrush dl config_installer\n\n\n\n\n\nInstall the subsite from the existing configuration:\n\n\ndrush site-install config_installer config_installer_sync_configure_form.sync_directory=../config/sync --db-url=mysql://dbuser:dbpass@127.0.0.1:dbport/dbname --account-name=admin --account-pass=admin -y\n\n\n\n\n\n\n\nNote\n\n\nFor more information about \nCMI\n and \nConfig Installer\n from an existing configuration see:\n\n\n\n\nBuild Drupal VM from existing Drupal project\n\n\nDrupal 8 Configuration Management\n\n\n\n\n\n\nConfigure your multisite domains and aliases with sites.php\n\n\nOn your \ndrupal\n installation, under \nsites/default\n copy the file \nexample.sites.php\n in \nsites\n folder and configure your subsite domains and aliases as below:\n\n\n$sites = array(\n  \nexample.dev\n =\n \nit.example.dev\n,\n  \nexample.com\n =\n \nit.example.dev\n,\n  \nit.example.dev\n =\n \nit.example.dev\n,\n  \nit.example.com\n =\n \nit.example.dev\n,\n  \nes.example.dev\n =\n \nes.example.dev\n,\n  \nes.example.com\n =\n \nes.example.dev\n,\n);\n\n\n\n\n\nYou can find more info about how to configure it in the file instead.", 
            "title": "Multisite"
        }, 
        {
            "location": "/drupal/drupal_multisite/#multisite", 
            "text": "If you are running more than one Drupal site, you can simplify the management and can upgrade your sites by using the multi-site feature. Multi-site allows you to share a single Drupal installation (including core code, contributed modules, and themes) among several sites.  This is particularly useful for managing the code since each upgrade only needs to be done once. Each site will have its own database and its own configuration settings, so each site will have its own content, settings, enabled modules, and enabled theme. However, the sites are sharing a code base and web document root, so there may be security concerns with multiple administrators. (See \" Security Concerns \" for more information).", 
            "title": "Multisite"
        }, 
        {
            "location": "/drupal/drupal_multisite/#create-a-multisite", 
            "text": "You can create a new installation either from scratch or as a sub-site of an existing Drupal installation. The only thing you need is a new empty database.  For a detailed list of steps, you can take a look at  Drupal.org Docs about Multi-site - Sharing the same code base .  Using drush, you can run this simple command:  drush site-install --db-url=mysql://db_user:db_password@localhost:port/db_name --sites-subdir=sample.subsite.com --account-name=admin --account-pass=admin -y  To install it with a different language than default (english) you can use the  locale  parameter. As example, to install it with  italian  language you can run:  drush site-install --db-url=mysql://db_user:db_password@localhost:port/db_name --sites-subdir=sample.subsite.com --account-name=admin --account-pass=admin  -locale=it -y", 
            "title": "Create a Multisite"
        }, 
        {
            "location": "/drupal/drupal_multisite/#multisite-with-shared-configuration", 
            "text": "We can use  Configuration Management  (CMI) with  Configuration Split  to share the configuration between sites (see  Configuration Management ).", 
            "title": "Multisite with Shared Configuration"
        }, 
        {
            "location": "/drupal/drupal_multisite/#install-a-subsite-from-an-existing-configuration", 
            "text": "With the help of  Configuration Installer  we can install a new subsite from an existing configuration.  Add the  Config Installer  profile:  drush dl config_installer  Install the subsite from the existing configuration:  drush site-install config_installer config_installer_sync_configure_form.sync_directory=../config/sync --db-url=mysql://dbuser:dbpass@127.0.0.1:dbport/dbname --account-name=admin --account-pass=admin -y   Note  For more information about  CMI  and  Config Installer  from an existing configuration see:   Build Drupal VM from existing Drupal project  Drupal 8 Configuration Management", 
            "title": "Install a subsite from an existing configuration"
        }, 
        {
            "location": "/drupal/drupal_multisite/#configure-your-multisite-domains-and-aliases-with-sitesphp", 
            "text": "On your  drupal  installation, under  sites/default  copy the file  example.sites.php  in  sites  folder and configure your subsite domains and aliases as below:  $sites = array(\n   example.dev  =   it.example.dev ,\n   example.com  =   it.example.dev ,\n   it.example.dev  =   it.example.dev ,\n   it.example.com  =   it.example.dev ,\n   es.example.dev  =   es.example.dev ,\n   es.example.com  =   es.example.dev ,\n);  You can find more info about how to configure it in the file instead.", 
            "title": "Configure your multisite domains and aliases with sites.php"
        }
    ]
}